"0","library(tidyverse)"
"0","library(gganimate)"
"0","library(transformr)"
"0","library(truncnorm)"
"0",""
"0",""
"0","casino_simulator <- function(rounds, players, topbottom = F, volatility = ""low"") {"
"0","  "
"0","  simulations = data.frame(nrow = 0)"
"0","  "
"0","  #For first win simulations (Nigel Turner's idea)"
"0","  first_win = data.frame(nrow = 0)"
"0","  "
"0","  #Theoretical 95 % confidence interval helpers"
"0","  cumEV = cumsum(rep(0, rounds))"
"0","  cumSD = sqrt(cumsum(rep(1^2, rounds))) #first convert to variance, then convert the sum back to SD // betsize = 1"
"0","  lower <- qnorm(0.025, cumEV, cumSD)"
"0","  upper <- qnorm(0.975, cumEV, cumSD)"
"0","  confidence <- data.frame(cbind(lower, upper))"
"0","  confidence$ID <- seq.int(nrow(confidence))"
"0","  "
"0","  "
"0","  if (volatility==""low"") {"
"0","    payout <- c(0, 2) - 1"
"0","    #payout <- c(-1, 0, 1) #shakkisekoilu"
"0","    probability <- c(50, 50)/100"
"0","    #probability <- c(3, 3, 94)/100"
"0","    ev <- sum(payout*probability)"
"0","  }"
"0","  "
"0","  else if (volatility==""med"") {"
"0","    payout <- c(0, 2) - 1"
"0","    probability <- c(50, 50)/100"
"0","    ev <- sum(payout*probability)"
"0","  }"
"0","  "
"0","  else { "
"0","    payout <- c(0, 2) - 1"
"0","    probability <- c(50, 50)/100"
"0","    ev <- sum(payout*probability)"
"0","  }"
"0",""
"0","  for (i in 1:players) {"
"0","    "
"0","    test <- sample(payout, rounds, replace=TRUE, prob=probability)"
"0","    test <- data.frame(run = test)"
"0","    names(test)[1] <- i #replaces run with simple integer (for simplicity). Code needs tidying a bit."
"0","  "
"0","    simulations <- cbind(simulations, cumsum(test))"
"0","    simulations$nrow <- NULL"
"0","    "
"0","    #Locate first win among all bets"
"0","    first_win_temp <- which(test > 0)[1]"
"0","    first_win_temp <- data.frame(run = first_win_temp)"
"0","    names(first_win_temp)[1] <- i"
"0","    first_win <- cbind(first_win, first_win_temp)"
"0","    first_win$nrow <- NULL"
"0","    "
"0","  }"
"0","  "
"0","  max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) # Among the last row, which column has the highest value"
"0","  min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) # Among the last row, which column has the lowest value"
"0","  "
"0","  #closest_value <- which(abs(simulations - 0) == min(abs(simulations - 0))) #Doesn't work quite yet"
"0","  "
"0","  #How many are winning at the end"
"0","  winners <- length(which(tail(simulations, 1) > 0))"
"0","  "
"0","  simulations$ID <- seq.int(nrow(simulations))"
"0","  "
"0","  "
"0","  #Somewhat clumsy way to calculate the top and bottom 10 simulated players. Improve later?"
"0","  "
"0","  top_ten_temp <- simulations %>% "
"0","    gather(player, value, -ID) %>%"
"0","    group_by(player) %>%"
"0","    dplyr::mutate(last_value = tail(value, 1)) %>%"
"0","    dplyr::summarize(last_value = mean(last_value)) %>%"
"0","    top_n(10, last_value) %>%"
"0","    dplyr::mutate(player = as.numeric(player))"
"0","  "
"0","  top_ten <- top_ten_temp[['player']]"
"0","  "
"0","  bottom_ten_temp <- simulations %>% "
"0","    gather(player, value, -ID) %>%"
"0","    group_by(player) %>%"
"0","    dplyr::mutate(last_value = tail(value, 1)) %>%"
"0","    dplyr::summarize(last_value = mean(last_value)) %>%"
"0","    top_n(-10, last_value) %>%"
"0","    dplyr::mutate(player = as.numeric(player))"
"0","  "
"0","  bottom_ten <- bottom_ten_temp[['player']]"
"0","  "
"0",""
"0",""
"0","  simulations.long <- simulations %>% "
"0","    gather(key, value, -ID) %>%"
"0","    group_by(key) %>%"
"0","    dplyr::mutate(profit = factor(ifelse(value > 0, 1, 0)), # Is the player winning or not"
"0","                  profitriskcumsum = cumsum(as.numeric(profit)-1), # cumulative number of rounds in profit"
"0","                  randomrisk = which(sample(c(0,1), n(), prob=c(.9999603, 1-.9999603), replace=T) == 1)[1], #among n(), produce a moment when problem gambling starts. Probability: 84 (one full week) hours of playing one has 50% chance of becoming ""problem gambler"" (or ""high risk gambler""). 84 * 60 minutes * 5 rounds = 25200 (1- 1/25200 =  .9999603)"
"0","                  randomrisk = ifelse(is.na(randomrisk), n(), randomrisk), #if prob gambling doesn't start, replace NA with total length of sample"
"0","                  randomrisk = c(rep(0, randomrisk[1]), rep(1, n() - randomrisk[1])), #vector with 0s until problem gambling starts (1s); have to index at 1 since rep-counts argument is a vector of identical values"
"0","                  problem = factor(case_when(profitriskcumsum > 900 | randomrisk == 1 ~ sample(c(""Not at risk"", ""At risk""), 1, prob=c(.5, .5)), # when winning too much, 50% chance of becoming probl. gambl. OR random risk of becoming problem gambler"
"0","                                             TRUE ~ ""Not at risk""))) %>%"
"0","    ungroup()"
"0","  "
"0","  "
"0","  #Upswing calculations using custom sliding-window regression (width-300 i.e. 1 hour)"
"0","  simulations.long <- simulations.long %>% group_by(key) %>% dplyr::mutate(id = seq(1:n()))"
"0","  "
"0","  upswing_detector <- function(window_width = 300, fidelity=1) { #window_width = 300 = 1 hour as a definition of upswing range"
"0","  estimates_slope <- list()"
"0","  counter = 0"
"0","  for (x in 1:length(unique(simulations.long$key))) { #iterate through all players"
"0","    for (i in seq(1, length(unique(simulations.long$id))+1-window_width, by = fidelity)) { #how many sliding windows fit within the sample, fidelity to speed calculation"
"0","      temp <- subset(simulations.long, key==x & id >= i & id < i+window_width) #subset based on selected window width"
"0","      "
"0","      temp_model <- lm(value ~ id, data=temp)"
"0","      counter = counter + 1"
"0","      estimates_slope[[counter]] <- coef(summary(temp_model))[2,1]"
"0","    }"
"0","  }"
"0","  "
"0","  estimates_slope <- as.data.frame(unlist(estimates_slope)) "
"0","  estimates_slope <- estimates_slope %>% "
"0","    dplyr::mutate(ID=rep(1:players, each=(length(unique(simulations.long$id))-window_width) / fidelity + 1)) # +1 before -window_width removed since otherwise doesn't work with fidelity=1 for some reason"
"0","  names(estimates_slope)[1] <- ""slope"""
"0",""
"0","  "
"0","  # Calculate proportion of upswings (vs. downswings) for all players, then obtain mean and sd across players, as well as maximum streak length with sd"
"0","  output1 <- estimates_slope %>%"
"0","    group_by(ID) %>%"
"0","    dplyr::mutate(positive = ifelse(slope > 0, 1, 0),"
"0","                  run_length = rep(rle(positive)$lengths, rle(positive)$lengths)) %>%"
"0","    dplyr::summarize(pos_prop = mean(positive),"
"0","                     max_run = max(run_length)) %>%"
"0","    ungroup() %>%"
"0","    dplyr::summarize(mean_grand_prop = mean(pos_prop),"
"0","                     sd_grand_prop = sd(pos_prop),"
"0","                     mean_run = mean(max_run),"
"0","                     sd_run = sd(max_run))"
"0","  "
"0","  output2 <- estimates_slope %>%"
"0","    group_by(ID) %>%"
"0","    dplyr::mutate(numb = 1:n(), upswing = factor(ifelse(slope > 0, ""Upswing"", ""Downswing""))) %>%"
"0","    ggplot(aes(numb, slope, color=upswing)) + "
"0","    geom_line(aes(group=1)) + "
"0","    #facet_wrap(""ID"", scales=""free"") + "
"0","    labs(color=NULL, x = ""Hours played"", y = ""Slope"") +"
"0","    scale_color_manual(values=c(""red"", ""blue"")) +"
"0","    scale_x_continuous(breaks = seq(0, (rounds-window_width)/10, by = 60),"
"0","                       labels=function(x)round(x/5/6 +1, 1)) + #+1 jotta saadaan tasattua normiplotin kanssa"
"0","    theme_minimal(base_size=14) +"
"0","    theme(legend.position=""bottom"")"
"0","  "
"0","  output3 <- estimates_slope %>%"
"0","    rename(key = ID) %>%"
"0","    group_by(key) %>%"
"0","    dplyr::mutate(key = as.character(key), ID = 1:n(), upswing = factor(ifelse(lag(slope, window_width/2) > 0, ""Upswing"", ""Downswing"")),"
"0","                  slope_corrected = lag(slope, window_width/2),"
"0","                  upswing_prop = mean(as.numeric(upswing)-1, na.rm=T)) #difficult to visualize upswings!! (this is not optimal, using lag() since the last 300 (window length) observations are missing by design)"
"0","  "
"0","  "
"0","  #return(ggarrange(output2, plot3))"
"0","  return(output3) #for colored visulaization of upswing"
"0","  #return(output1) #for upswing proportion calculations"
"0","}"
"0","  "
"0","  # !!!!!uncomment below to be able to use plot4!!!!!"
"0","  "
"0","  #simulations.long <- simulations.long %>% left_join(upswing_detector())"
"0","  "
"0","  #This was for testing whether the upswing detector works (un-comment below, and add ""labs(title = output)"" to plot3)"
"0","#output <- upswing_detector()"
"0","  "
"0","  #THIS IS AN ALPHA VERSION: Illustrations of ""at risk"" players based on time as a winner and length of play"
"0","  # plot <- simulations.long %>%"
"0","  #   dplyr::mutate(problem = fct_relevel(problem, ""Not at risk"")) %>% #force factor level order (simulations mess this up every now and then...)"
"0","  #   ggplot(aes(ID, value, group=key)) + # group=key here required for complex animation"
"0","  #   geom_line(aes(colour = problem, size = problem)) +"
"0","  #   geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","  #   geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","  #   xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","  #   theme_minimal(base_size=14) +"
"0","  #   scale_x_continuous(breaks = seq(0, rounds, by = 600), #by = 600 on by 2 hours (i.e. 600 rounds / 5 / 60)"
"0","  #                      labels=function(x)round(x/5/60, 1)) +"
"0","  #   theme(legend.title = element_blank(),"
"0","  #         legend.position = ""top"") +"
"0","  #   scale_color_manual(values=c(""lightblue"", ""red"")) +"
"0","  #   scale_size_manual(values = c(.3, 1))"
"0","  #   # guides(color=""none"")"
"0",""
"0","  # Plot only the top and bottom ""players"""
"0","  # Note, for animations, the coloring is sensitive to alphabetical order of the key-factor labels!"
"0","  plot2 <- simulations.long %>%"
"0","    dplyr::filter(key == max_value | key == min_value) %>%"
"0","    dplyr::mutate(key = factor(key, levels = c(max_value, min_value),"
"0","                               labels = c(""Luckiest\nplayer"", ""Unluckiest\nplayer""))) %>%"
"0","    ggplot(aes(ID, value, group=key)) +"
"0","    geom_line(aes(colour = key)) +"
"0","    geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","    geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","    xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","    theme_minimal(base_size=14) +"
"0","    scale_x_continuous(breaks = seq(0, rounds, by = 600), # If <0 hour is visualized, the x-axis will not show correctly"
"0","                       labels=function(x)round(x/5/60, 1)) +"
"0","    guides(color=""none"")"
"0","  "
"0","  # Combined plot"
"0","  # (code may fail if there are 3 or more identical values (shared bottom or top))"
"0","  plot3 <- simulations.long %>%"
"0","    "
"0","    #Comment back in for top and bottom"
"0","    dplyr::mutate(maxmin = case_when(key == max_value ~ ""Luckiest\nplayer"","
"0","                                     key == min_value ~ ""Unluckiest\nplayer"","
"0","                                     #key == closest_value[1] ~ ""Closest to EV"", #doesn't work yet"
"0","                                     TRUE ~ ""Others""),"
"0","                  maxmin = factor(maxmin, levels = c(""Luckiest\nplayer"", ""Unluckiest\nplayer"", ""Others""))) %>%"
"0","    "
"0","    #Use this for top 10 and bottom 10"
"0","    # dplyr::mutate(maxmin = case_when(key %in% top_ten ~ ""Luckiest\n10 % of players"","
"0","    #                                  key %in% bottom_ten ~ ""Unluckiest\n10 % of players"","
"0","    #                                  TRUE ~ ""Others""),"
"0","    #               maxmin = factor(maxmin, levels = c(""Luckiest\n10 % of players"", ""Unluckiest\n10 % of players"", ""Others""))) %>%"
"0","    "
"0","    "
"0","    ggplot(aes(ID, value, group=key)) +"
"0","    geom_line(aes(colour = maxmin, alpha = maxmin, size = maxmin)) +"
"0","    geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","    geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","    geom_line(data = confidence, aes(x = ID, y = lower), linetype=""dashed"", color=""black"", size=0.5, inherit.aes=F) +"
"0","    geom_line(data = confidence, aes(x = ID, y = upper), linetype=""dashed"", color=""black"", size=0.5, inherit.aes=F) +"
"0","    xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","    scale_color_manual(values=c(""dodgerblue"", ""tomato"", ""grey"")) +"
"0","    theme_minimal(base_size=14) +"
"0","    theme(legend.title = element_blank(),"
"0","          legend.position = ""top"") +"
"0","    scale_x_continuous(breaks = seq(0, rounds, by = 600),"
"0","                       labels=function(x)round(x/5/60, 1)) +"
"0","    scale_alpha_manual(values = c(.7, .7, .3)) +"
"0","    scale_size_manual(values = c(0.5, 0.5, .5))"
"0","    #labs(title = paste(""Upswing proportion (SD): "", round(output[1], 3), ""("", round(output[2], 3), "")""))"
"0","  "
"0","  #Upswing visualization (not optimal!)"
"0","  plot4 <- simulations.long %>%"
"0","    # dplyr::mutate(slope_corrected = ifelse(is.na(slope_corrected), 0, slope_corrected)) %>% ## I'm switching back to numeric for testing purposes, fix later"
"0","    na.omit() %>%"
"0","    ggplot(aes(ID, value, group=key)) +"
"0","    geom_line(aes(colour = slope_corrected), size=0.9) +"
"0","    geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","    geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","    xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","    labs(color = ""Streak strength"") +"
"0","    theme_minimal(base_size=14) +"
"0","    theme(legend.position = ""top"") +"
"0","    scale_alpha_manual(values = c(1, 1, .3)) +"
"0","    scale_size_manual(values = c(1, 1, .5)) +"
"0","    scale_color_gradient2(low=""red"", mid = ""lightblue"", high=""blue"") +"
"0","    scale_x_continuous(breaks = seq(0, rounds, by = 600),"
"0","                       labels=function(x)round(x/5/60, 1))"
"0","  "
"0","  #Add the below only if upswing_detector is used!"
"0","  "
"0","    # annotate(""text"", x = 550, y = 60, "
"0","    #          label = paste(""Winning streaks:"", round(simulations.long$upswing_prop[1], 3)*100, ""%""))"
"0","    # # annotate(""text"", x = 550, y = 60, "
"0","    # #          label = paste(""Winning streaks:"", round(simulations.long$upswing_prop[1], 3)*100, ""%"", "
"0","    # #                        round(simulations.long$upswing_prop[rounds+1], 3)*100, ""%"")) #This is an ugly fix, not for long-term use"
"0",""
"0","  "
"0","  "
"0","  if (topbottom == F) {"
"0","    return(plot3) #winners for number of winners"
"0","    }"
"0","  else {"
"0","    return(plot2) #or upswing_detector()"
"0","    "
"0","    #plot for problem gambling risk plot (ALPHA VERSION!), plot2 for top and bottom, winners for number of winners at end. Visualizations work with ""plot2"". Note that the code may break (update to fix this is pending) if two players have idential wins or losses at the top or bottom (this is quite rare but may happen). upswing_detector() for mean length and sd of average upswings (defined as upwards trending streak of 2 hours)"
"0","    }"
"0","}"
"0",""
"0","#for basic calculations e.g. mean(replicate(5, casino_simulator(300, 100, F, ""low""))); FOR THIS USE ""winners"" as the return output!"
"0",""
