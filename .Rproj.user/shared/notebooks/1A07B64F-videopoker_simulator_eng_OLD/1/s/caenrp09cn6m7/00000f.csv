"0","library(tidyverse)"
"0","library(gganimate)"
"0","library(transformr)"
"0","library(truncnorm)"
"0",""
"0",""
"0","casino_simulator <- function(rounds, players, topbottom = F, volatility = ""low"") {"
"0","  "
"0","  simulations = data.frame(nrow = 0)"
"0","  "
"0","  if (volatility==""low"") {"
"0","    payout <- c(100, 50, 30, 15, 8, 7, 3, 2, 0) - 1"
"0","    probability <- c(0.002, 0.011, 0.236, 1.151, 1.101, 1.123, 7.445, 12.928, 76.003)/100"
"0","    ev <- sum(payout*probability) #ev = -0.10045"
"0","  }"
"0","  "
"0","  else if (volatility==""med"") {"
"0","    payout <- c(500, 65, 45, 13, 7, 6, 3, 2, 0) - 1"
"0","    probability <- c(0.002, 0.011, 0.236, 1.151, 1.101, 1.123, 7.445, 12.928, 76.003)/100"
"0","    ev <- sum(payout*probability) #ev = -0.10066"
"0","  }"
"0","  "
"0","  else { "
"0","    payout <- c(2000, 50, 33, 14, 7, 5, 3, 2, 0) - 1"
"0","    probability <- c(0.002, 0.011, 0.236, 1.151, 1.101, 1.123, 7.445, 12.928, 76.003)/100"
"0","    ev <- sum(payout*probability) #ev = -0.10035"
"0","  }"
"0",""
"0","  for (i in 1:players) {"
"0","    "
"0","    test <- sample(payout, rounds, replace=TRUE, prob=probability)"
"0","    test <- data.frame(run = test)"
"0","    names(test)[1] <- i"
"0","  "
"0","    simulations <- cbind(simulations, cumsum(test))"
"0","    simulations$nrow <- NULL"
"0","    "
"0","  }"
"0","  "
"0","  max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) # Among the last row, which column has the highest value"
"0","  min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) # Among the last row, which column has the lowest value"
"0","  "
"0","  #How many are winning at the end"
"0","  winners <- length(which(tail(simulations, 1) > 0))"
"0","  "
"0","  simulations$ID <- seq.int(nrow(simulations))"
"0",""
"0","  simulations.long <- simulations %>% "
"0","    gather(key, value, -ID) %>%"
"0","    group_by(key) %>%"
"0","    dplyr::mutate(profit = factor(ifelse(value > 0, 1, 0)), # Is the player winning or not"
"0","                  profitriskcumsum = cumsum(as.numeric(profit)-1), # cumulative number of rounds in profit"
"0","                  randomrisk = which(sample(c(0,1), n(), prob=c(.9999603, 1-.9999603), replace=T) == 1)[1], #among n(), produce a moment when problem gambling starts. Probability: 84 (one full week) hours of playing one has 50% chance of becoming ""problem gambler"" (or ""high risk gambler""). 84 * 60 minutes * 5 rounds = 25200 (1- 1/25200 =  .9999603)"
"0","                  randomrisk = ifelse(is.na(randomrisk), n(), randomrisk), #if prob gambling doesn't start, replace NA with total length of sample"
"0","                  randomrisk = c(rep(0, randomrisk[1]), rep(1, n() - randomrisk[1])), #vector with 0s until problem gambling starts (1s); have to index at 1 since rep-counts argument is a vector of identical values"
"0","                  problem = factor(case_when(profitriskcumsum > 900 | randomrisk == 1 ~ sample(c(""Not at risk"", ""At risk""), 1, prob=c(.5, .5)), # when winning too much, 50% chance of becoming probl. gambl. OR random risk of becoming problem gambler"
"0","                                             TRUE ~ ""Not at risk""))) %>%"
"0","    ungroup()"
"0","  "
"0","  #THIS IS AN ALPHA VERSION: Illustrations of ""at risk"" players based on time as a winner and length of play"
"0","  plot <- simulations.long %>%"
"0","    dplyr::mutate(problem = fct_relevel(problem, ""Not at risk"")) %>% #force factor level order (simulations mess this up every now and then...)"
"0","    ggplot(aes(ID, value, group=key)) + # group=key here required for complex animation"
"0","    geom_line(aes(colour = problem, size = problem)) +"
"0","    geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","    geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","    xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","    theme_minimal(base_size=14) +"
"0","    scale_x_continuous(breaks = seq(0, rounds, by = 600), #by = 600 on by 2 hours (i.e. 600 rounds / 5 / 60)"
"0","                       labels=function(x)round(x/5/60, 1)) +"
"0","    theme(legend.title = element_blank(),"
"0","          legend.position = ""top"") +"
"0","    scale_color_manual(values=c(""lightblue"", ""red"")) +"
"0","    scale_size_manual(values = c(.3, 1))"
"0","    # guides(color=""none"")"
"0",""
"0","  # Plot only the top and bottom ""players"""
"0","  # Note, for animations, the coloring is sensitive to alphabetical order of the key-factor labels!"
"0","  plot2 <- simulations.long %>%"
"0","    dplyr::filter(key == max_value | key == min_value) %>%"
"0","    dplyr::mutate(key = factor(key, levels = c(max_value, min_value),"
"0","                               labels = c(""Luckiest\nplayer"", ""Unluckiest\nplayer""))) %>%"
"0","    ggplot(aes(ID, value, group=key)) +"
"0","    geom_line(aes(colour = key)) +"
"0","    geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","    geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","    xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","    theme_minimal(base_size=14) +"
"0","    scale_x_continuous(breaks = seq(0, rounds, by = 600), # If <0 hour is visualized, the x-axis will not show correctly"
"0","                       labels=function(x)round(x/5/60, 1)) +"
"0","    guides(color=""none"")"
"0","  "
"0","  # Combined plot"
"0","  # (code may fail if there are 3 or more identical values (shared bottom or top))"
"0","  plot3 <- simulations.long %>%"
"0","    dplyr::mutate(maxmin = case_when(key == max_value ~ ""Luckiest\nplayer"","
"0","                                     key == min_value ~ ""Unluckiest\nplayer"","
"0","                                     TRUE ~ ""Others""),"
"0","                  maxmin = factor(maxmin, levels = c(""Luckiest\nplayer"", ""Unluckiest\nplayer"", ""Others""))) %>%"
"0","    ggplot(aes(ID, value, group=key)) +"
"0","    geom_line(aes(colour = maxmin, alpha = maxmin, size = maxmin)) +"
"0","    geom_abline(intercept = 0, slope = ev, linetype=""dashed"", size=0.5, color=""red"", alpha=.5) +"
"0","    geom_hline(yintercept = 0, size=0.5, alpha=.5) +"
"0","    xlab(""Hours played"") + ylab(""Money (euros)"") +"
"0","    scale_color_manual(values=c(""blue"", ""red"", ""grey"")) +"
"0","    theme_minimal(base_size=14) +"
"0","    theme(legend.title = element_blank(),"
"0","          legend.position = ""top"") +"
"0","    scale_x_continuous(breaks = seq(0, rounds, by = 600),"
"0","                       labels=function(x)round(x/5/60, 1)) +"
"0","    scale_alpha_manual(values = c(1, 1, .3)) +"
"0","    scale_size_manual(values = c(1, 1, .5))"
"0","  "
"0","  "
"0","  if (topbottom == F) {"
"0","    return(plot3) "
"0","    }"
"0","  else {"
"0","    return(plot2) #plot for problem gambling risk plot (ALPHA VERSION!), plot2 for top and bottom, winners for number of winners at end. Visualizations work with ""plot2"". Note that the code may break (update to fix this is pending) if two players have idential wins or losses at the top or bottom (this is quite rare but may happen)."
"0","    }"
"0","}"
