library(tidyverse)


simulations = data.frame(nrow = 0)

rounds <- 100
players <- 100

#Theoretical 95 % confidence interval helpers
cumEV = cumsum(rep(0, rounds))
cumSD = sqrt(cumsum(rep(1^2, rounds))) #first convert to variance, then convert the sum back to SD // betsize = 1
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))


for (i in 1:players) {
  
  test <- sample(payout, rounds, replace=TRUE, prob=probability)
  test <- data.frame(run = test)
  names(test)[1] <- i #replaces run with simple integer (for simplicity). Code needs tidying a bit.
  
  simulations <- cbind(simulations, cumsum(test))
  simulations$nrow <- NULL

  
}



max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) # Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) # Among the last row, which column has the lowest value

simulations$flip <- seq.int(nrow(simulations))

simulations.long <- simulations %>% 
  gather(player, value, -flip) %>%
  group_by(player) %>%
  dplyr::mutate(last_value = tail(value, 1)) %>%
  dplyr::summarize(last_value = mean(last_value)) %>%
  top_n(10, last_value) %>%
  dplyr::mutate(player = as.numeric(player))

top_ten <- simulations.long[['player']]

  
simulations.long <- simulations %>% 
  gather(player, value, -flip) %>%
  group_by(player) %>%
  dplyr::mutate(last_value = tail(value, 1)) %>%
  dplyr::summarize(last_value = mean(last_value)) %>%
  top_n(-10, last_value) %>%
  dplyr::mutate(player = as.numeric(player))

bottom_ten <- simulations.long[['player']]
  
  
  
  
  