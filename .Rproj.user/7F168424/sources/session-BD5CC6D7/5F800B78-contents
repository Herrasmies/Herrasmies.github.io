casino_simulator <- function(rounds, players, volatility="low", topbottom=F) {
  
  simulations = data.frame(nrow = 0)
  
  if (volatility=="low") {
    payout <- c(100, 50, 30, 13, 7, 6, 3, 2, 0) - 1
    probability <- c(0.002, 0.011, 0.236, 1.151, 1.101, 1.123, 7.445, 12.928, 76.003)/100
    ev <- sum(payout*probability)
  }
  
  # else if (volatility=="med") {
  #   payout <- c(500, 30, 13, 7, 6, 3, 2, 1, 0) - 1
  #   probability <- c(0.002, 0.011, 0.236, 1.151, 1.101, 1.123, 7.445, 12.928, 76.003)/100
  #   ev <- sum(payout*probability)
  # }
  # 
  # else if (volatility == "high") {
  #   payout <- c(1000, 25, 10, 7, 4, 3, 2, 1, 0) - 1
  #   probability <- c(0.002, 0.011, 0.236, 1.151, 1.101, 1.123, 7.445, 12.928, 76.003)/100
  #   ev <- sum(payout*probability)
  # }
  
  for (i in 1:players) {
    test <- sample(payout, rounds, replace=TRUE, prob=probability)
    test <- data.frame(run = test)
    names(test)[1] <- i
    simulations <- cbind(simulations, cumsum(test))
    simulations$nrow <- NULL   
    
    max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) # Among the last row, which column has the highest value
    min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) # Among the last row, which column has the lowest value
    
    simulations$ID <- seq.int(nrow(simulations))
    
    simulations.long <- simulations %>% 
      gather(key, value, -ID) %>%
      dplyr::mutate(profit = factor(ifelse(value > 0, 1, 0))) # Is the player winning or not
    
    # Plot all players
    plot <- simulations.long %>%
      ggplot(aes(ID, value, group=key)) + # group=key here required for complex animation
      geom_line(aes(colour = key)) +
      geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
      geom_hline(yintercept = 0, size=0.5, alpha=.5) +
      xlab("Pelatut tunnit") + ylab("Raha (euroja)") +
      theme_minimal(base_size=14) +
      scale_x_continuous() +
      guides(color="none")
    
    # Plot only the top and bottom "players"
    plot2 <- simulations.long %>%
      dplyr::filter(key == max_value | key == min_value) %>%
      dplyr::mutate(key = factor(key, levels = c(max_value, min_value),
                                 labels = c("Onnekkain\npelaaja", "Epäonnekkain\npelaaja"))) %>%
      ggplot(aes(ID, value, group=key)) +
      geom_line(aes(colour = key)) +
      
      geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
      geom_hline(yintercept = 0, size=0.5, alpha=.5) +
      xlab("Pelatut tunnit") + ylab("Raha (euroja)") +
      theme_minimal(base_size=14) +
      scale_x_continuous() +
      guides(color="none")
    
    # Combined plot
    plot3 <- simulations.long %>%
      dplyr::mutate(maxmin = case_when(key == max_value ~ "Onnekkain\npelaaja",
                                       key == min_value ~ "Epäonnekkain\npelaaja",
                                       TRUE ~ "Muut"),
                    maxmin = factor(maxmin, levels = c("Onnekkain\npelaaja", "Epäonnekkain\npelaaja", "Muut"))) %>%
      ggplot(aes(ID, value, group=key)) +
      geom_line(aes(colour = maxmin, alpha = maxmin, size = maxmin)) +
      
      #Old version: slope = ev
      geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
      geom_hline(yintercept = 0, size=0.5, alpha=.5) +
      xlab("Pelatut tunnit") + ylab("Raha (euroja)") +
      scale_color_manual(values=c("blue", "red", "grey")) +
      theme_minimal(base_size=14) +
      theme(legend.title = element_blank(),
            legend.position = "top") +
      scale_x_continuous() +
      scale_alpha_manual(values = c(1, 1, .3)) +
      scale_size_manual(values = c(1, 1, .5))
    
    
    if (topbottom == F) {
      return(plot3) 
    } 
    else {
      return(plot2)
    }
  }
}