
## Load libraries
library(tidyverse)
library(poLCA)
library(forcats)
library(ggmosaic)
library(emmeans)
library(scales)
library(fmsb)
library(RColorBrewer)
library(CDM)
library(naniar)
library(mice)
library(VGAM)
library(glca)
library(nnet)
library(ggpubr)

#HELPER FUNCTION, BIVARIATE RESIDUALS
#https://gist.github.com/daob/883fbffdff6762c3bb90b3d8d3d0ae6e

bvr <- function(fit) {
  stopifnot(class(fit) == "poLCA")
  
  ov_names <- names(fit$predcell)[1:(ncol(fit$predcell) - 2)]
  ov_combn <- combn(ov_names, 2)
  
  get_bvr <- function(ov_pair) {
    form_obs <- as.formula(paste0("observed ~ ", ov_pair[1], " + ", ov_pair[2]))
    form_exp <- as.formula(paste0("expected ~ ", ov_pair[1], " + ", ov_pair[2]))
    
    counts_obs <- xtabs(form_obs, data = fit$predcell)
    counts_exp <- xtabs(form_exp, data = fit$predcell)
    
    bvr <- sum((counts_obs - counts_exp)^2 / counts_exp)
    
    bvr
  }
  
  bvr_pairs <- apply(ov_combn, 2, get_bvr)
  # names(bvr_pairs) <- apply(ov_combn, 2, paste, collapse = "<->")
  attr(bvr_pairs, "class") <- "dist"
  attr(bvr_pairs, "Size") <- length(ov_names)
  attr(bvr_pairs, "Labels") <- ov_names
  attr(bvr_pairs, "Diag") <- FALSE
  attr(bvr_pairs, "Upper") <- FALSE
  
  bvr_pairs
}


# MIT license
# Author: Daniel Oberski
# Input: result of a poLCA model fit
# Output: entropy R^2 statistic (Vermunt & Magidson, 2013, p. 71)
# See: daob.nl/wp-content/uploads/2015/07/ESRA-course-slides.pdf
# And: https://www.statisticalinnovations.com/wp-content/uploads/LGtecnical.pdf


machine_tolerance <- sqrt(.Machine$double.eps)
entropy.R2 <- function(fit) {
  entropy <- function(p) {
    p <- p[p > machine_tolerance] # since Lim_{p->0} p log(p) = 0
    sum(-p * log(p))
  }
  error_prior <- entropy(fit$P) # Class proportions
  error_post <- mean(apply(fit$posterior, 1, entropy))
  R2_entropy <- (error_prior - error_post) / error_prior
  R2_entropy
}


## Set contrasts
# We'll use the "treatment", i.e. dummy-coding scheme
#options(contrasts=c("contr.sum", "contr.poly"))
options(contrasts=c("contr.treatment", "contr.poly"))


## Import data
lca_data <- read.csv("C:\\Users\\jpgk\\Desktop\\LCA stuff with Joe\\lca_data.csv", sep=";")


## Wrangle and explore data

# Wrangle data, calculate scales

lca_data <- lca_data %>% 
  dplyr::select(Year_ID, B1, B2, B3, B4B, B4A, B6, B5, B7, B8B, B8C, B8A, B9, B10, B13, B14, B16, B18, B18YY,
                PGSI_1, PGSI_2, PGSI_3, PGSI_4, PGSI_5, PGSI_6, PGSI_7, PGSI_8, PGSI_9,
                Gender, Age, Highest_Education_Attained, Average_Monthly_Income, wcal,
                ATG_1, ATG_2, ATG_3, ATG_4, ATG_5, ATG_6, ATG_7, ATG_8,
                B26A,
                Average_Weekly_Spend, Average_Monthly_Spend, Average_Annual_Spend) %>%
  group_by(Year_ID) %>%
  dplyr::mutate(gambled_any_dich = sum(B1, B2, B3, B4B, B4A, B6, B5, B7, B8B, B8C, B8A,
                                       B9, B10, B13, B14, B16, B18, B18YY, na.rm=T), #if 36 then has not gambled at all (2 (=no) x 18 = 36)
                PGSI_mean = mean(c(PGSI_1, PGSI_2, PGSI_3, PGSI_4, PGSI_5, PGSI_6, PGSI_7, PGSI_8, PGSI_9), na.rm=T),
                PGSI_sum = sum(c(PGSI_1-1, PGSI_2-1, PGSI_3-1, PGSI_4-1, PGSI_5-1, PGSI_6-1, PGSI_7-1, PGSI_8-1, PGSI_9-1), na.rm=T),
                ATGS_mean = mean(c(6-ATG_1, ATG_2, ATG_3, 6-ATG_4, ATG_5, 6-ATG_6, 6-ATG_7, ATG_8), na.rm=T), #HUOM! Skooraus 1 = agree, 5 = disagreee!!!
                PGSI_category = as.factor(case_when(PGSI_sum == 0 ~ "No problems",
                                                    PGSI_sum > 0 & PGSI_sum < 3 ~ "Low level of problems",
                                                    PGSI_sum >= 3 & PGSI_sum < 8 ~ "Moderate level of problems",
                                                    PGSI_sum >= 8 ~ "High level of problems"))) %>%
  ungroup() %>%
  dplyr::rename(weekly_lottery = B1, #slow
                quick_raffle = B2, #online
                other_daily_lottery = B3, #slow
                scratch_card = B4B,
                scratch_card_web = B4A, #online
                horse_betting = B6, #skill, slow
                sports_betting = B5, #skill, slow
                casino_gambling = B7,
                slot_machine_phys = B8B,
                slot_machine_arcade = B8C,
                slot_machine_web = B8A, #online
                table_games_croupier = B9, #skill
                online_poker_veikkaus = B10, #online, skill
                private_betting_pools = B13, #slow
                cruise_gambling_paf = B14,
                online_gambling_paf = B16, #online
                online_gambling_foreign = B18, #online
                gambling_paf_land_notfin = B18YY,
                age = Age,
                gender = Gender,
                education = Highest_Education_Attained,
                income = Average_Monthly_Income,
                weights = wcal,
                main_reason = B26A,
                spent_weekly = Average_Weekly_Spend,
                spent_monthly = Average_Monthly_Spend,
                spent_yearly = Average_Annual_Spend) %>%
  dplyr::filter(gambled_any_dich != 36) #jos halutaan vain ne jotka on pelanneet joskus

lca_data$gender <- as.factor(lca_data$gender)
lca_data$main_reason <- factor(lca_data$main_reason, labels=c("Excitement, entertainment, fun", "To win money",
                                                              "To develop skills", "To compete or challenge yourself",
                                                              "To socialize", "To support worthy causes",
                                                              "To escape, relax or relieve stress",
                                                              "Because it made me feel good or skilful",
                                                              "Other reason"))


# Fix education variable (change "have not finished school" as 0, then remove "other education")

lca_data <- lca_data %>% dplyr::mutate(education = ifelse(education == 8, 0,
                                                          ifelse(education == 7, NA, education))) 


# Fix money spent as all weekly

lca_data <- lca_data %>% dplyr::mutate(spent_monthly2 = spent_monthly/4,
                                       spent_yearly2 = spent_yearly/52,
                                       spent_weekly = ifelse(is.na(spent_weekly), spent_monthly2, spent_weekly),
                                       spent_weekly = ifelse(is.na(spent_weekly), spent_yearly2, spent_weekly))




# Combine game types (1 = has tried at least once, 2 = has not)

lca_data <- lca_data %>% dplyr::mutate(slots = ifelse(slot_machine_phys+slot_machine_arcade+slot_machine_web !=6, 1, 2),
                                       lottery = ifelse(weekly_lottery+quick_raffle+other_daily_lottery !=6, 1, 2),
                                       scratch = ifelse(scratch_card+scratch_card_web != 4, 1, 2),
                                       casino = ifelse(casino_gambling+table_games_croupier != 4, 1, 2),
                                       online = ifelse(online_gambling_paf+online_gambling_foreign+online_poker_veikkaus != 6, 1, 2))


### Explore missing values

# Explore missing values
# PGSI

lca_data %>% dplyr::select(PGSI_1, PGSI_2, PGSI_3, PGSI_4, PGSI_5, PGSI_6, PGSI_7, PGSI_8, PGSI_8) %>% 
  vis_miss()


# ATGS

lca_data %>% dplyr::select(ATG_1, ATG_2, ATG_3, ATG_4, ATG_5, ATG_6, ATG_7, ATG_8) %>% 
  vis_miss()


# Demographics

lca_data %>% dplyr::select(age, education, income, gender, PGSI_mean, ATGS_mean) %>% 
  vis_miss()




### LCA modelling

# Select variables

f <- with(lca_data, cbind(lottery, scratch, horse_betting, sports_betting, casino, slots, online, 
                          private_betting_pools, cruise_gambling_paf)~1) #omit gambling_paf_notfin due to low cell size


# Run a sequence of models with N classes (now from 2 to 7) and print out the model with the lowest BIC

max_II <- -100000
min_bic <- 100000
for(i in 2:7){ #change if needed
  lc <- poLCA(f, lca_data, nclass=i, maxiter=3000, 
              tol=1e-5, na.rm=FALSE,  
              nrep=10, verbose=TRUE, calc.se=TRUE, graphs=TRUE)
  print(lc$coeff.V) #covariance matrix
  # ##RELATIVE ENTROPY
  # ##Numerator:
  # nume.E <- -sum(lc$posterior * log(lc$posterior), na.rm=T)
  # ##Denominator (n*log(K)): ## n is a sample size, and K is a number of class
  # deno.E <- 3141*log(i)
  # ##Relative Entropy
  # Entro <- 1-(nume.E/deno.E)
  # print(Entro)
  print(poLCA.entropy(lc))
  print(entropy.R2(lc))
  print(bvr(lc))
  
  if(lc$bic < min_bic){
    min_bic <- lc$bic
    LCA_best_model<-lc
  }
}

# View best model

LCA_best_model

# Pull predicted classes from LCA-model and combine with original data

lca_full <- cbind(lca_data, LCA_best_model$predclass)
names(lca_full)[58] <- "predictions"
lca_full$predictions <- as.factor(lca_full$predictions)
lca_full$income_log <- log(lca_full$income+1)

### Initial visualization

# Visualize

LCA_plot <- tibble(unlist(LCA_best_model$probs), unlist(LCA_best_model$probs.se))

LCA_plot <- LCA_plot %>% dplyr::mutate(game_type = as.factor(c(rep("Lottery", 8), #number reflects classes x options (responses 1 or 2)
                                                               rep("Scratch cards", 8),
                                                               rep("Horse betting", 8),
                                                               rep("Sports betting", 8),
                                                               rep("Casino gambling", 8),
                                                               rep("Slot machines", 8),
                                                               rep("Online gambling (PAF, foreign sites)", 8),
                                                               rep("Private betting pools", 8),
                                                               rep("Cruise gambling (PAF)", 8))),
                                       response = rep(c(1,1,1,1,2,2,2,2), 9), #change to 11 if online_poker and paf included
                                       class = rep(c(1,2,3,4,1,2,3,4), 9),
                                       group = rep("No covariates", n())) %>% #change to 11 if online_poker and paf included
  dplyr::rename("probability" = `unlist(LCA_best_model$probs)`,
                "prob.se" = `unlist(LCA_best_model$probs.se)`) %>%
  dplyr::filter(response == 1)


fig1 <- LCA_plot %>% dplyr::mutate(game_type = fct_reorder(game_type, probability)) %>%
  ggplot(aes(game_type, probability)) +
  geom_col() +
  facet_wrap("class") +
  labs(y = "Probability of having played within past 12 months", x = "Gambling type") +
  geom_text(aes(label=round(probability, 2)), size=2.3, hjust=-.1, vjust=.15) +
  theme_bw() +
  coord_flip() +
  labs(title="LCA without covariates")





#alternative, GLCA
# 


lca_full_temp <- lca_full %>% dplyr::select(lottery, scratch, horse_betting, sports_betting, casino, slots, online, private_betting_pools, cruise_gambling_paf,
                                            age, education, income_log, gender, PGSI_category2, ATGS_mean, spent_weekly) %>%
  dplyr::rename(v1 = lottery, 
                v2 = scratch, 
                v3 = horse_betting, 
                v4 = sports_betting, 
                v5 = casino, 
                v6 = slots, 
                v7 = online, 
                v8 = private_betting_pools, 
                v9 = cruise_gambling_paf,
                # v10 = age,
                # v11 = education,
                # v12 = income_log,
                # v13 = PGSI_category2,
                # v14 = ATGS_mean,
                # v15 = spent_weekly,
                # v16 = gender
  )

lca_full_temp$age[which(is.na(lca_full_temp$age))] <- median(lca_full_temp$age, na.rm=T)
lca_full_temp$education[which(is.na(lca_full_temp$education))] <- median(lca_full_temp$education, na.rm=T)
lca_full_temp$income_log[which(is.na(lca_full_temp$income_log))] <- median(lca_full_temp$income_log, na.rm=T)
lca_full_temp$spent_weekly[which(is.na(lca_full_temp$spent_weekly))] <- median(lca_full_temp$spent_weekly, na.rm=T)

fu <- item(v1, v2, v3, v4, v5, v6, v7, v8, v9) ~ #1 ##code has a bug with too long variable names
  age+education+income_log+PGSI_category2+ATGS_mean+spent_weekly+gender

glca_model2 <- glca(fu, data=lca_full_temp, nclass=2, seed=1)
glca_model3 <- glca(fu, data=lca_full_temp, nclass=3, seed=1)
glca_model4 <- glca(fu, data=lca_full_temp, nclass=4, seed=1)
glca_model5 <- glca(fu, data=lca_full_temp, nclass=5, seed=1)
glca_model6 <- glca(fu, data=lca_full_temp, nclass=6, seed=1)
glca_model7 <- glca(fu, data=lca_full_temp, nclass=7, seed=1)

gofglca(glca_model2, glca_model3, glca_model4, glca_model5, glca_model6, test = "chisq", seed = 1) #also test = "boot"


LCA_plot_new <- tibble(unlist(glca_model4$param$rho$ALL), unlist(glca_model4$std.err$rho$ALL))

LCA_plot_new <- LCA_plot_new %>% dplyr::mutate(game_type = as.factor(c(rep("Lottery", 8), #number reflects classes x options (responses 1 or 2)
                                                       rep("Scratch cards", 8),
                                                       rep("Horse betting", 8),
                                                       rep("Sports betting", 8),
                                                       rep("Casino gambling", 8),
                                                       rep("Slot machines", 8),
                                                       rep("Online gambling (PAF, foreign sites)", 8),
                                                       rep("Private betting pools", 8),
                                                       rep("Cruise gambling (PAF)", 8))),
                               response = rep(c(1,1,1,1,2,2,2,2), 9), #change to 11 if online_poker and paf included
                               class = rep(c(1,4,3,2,1,4,3,2), 9), #manually change order to match earlier non-covariate LCA
                               group = rep("Covariate adjusted", n())) %>% #change to 11 if online_poker and paf included
  dplyr::rename("probability" = `unlist(glca_model4$param$rho$ALL)`,
                "prob.se" = `unlist(glca_model4$std.err$rho$ALL)`) %>%
  dplyr::filter(response == 1)



fig2 <- LCA_plot_new %>% dplyr::mutate(game_type = fct_reorder(game_type, probability)) %>%
  ggplot(aes(game_type, probability)) +
  geom_col() +
  facet_wrap("class") +
  labs(y = "Probability of having played within past 12 months", x = "Gambling type") +
  geom_text(aes(label=round(probability, 2)), size=2.3, hjust=-.1, vjust=.15) +
  theme_bw() +
  coord_flip() +
  labs(title = "Covariate adjusted LCA")

ggarrange(fig1, fig2)

#alternative visualization
LCA_plot_final <- rbind(LCA_plot, LCA_plot_new)

LCA_plot_final %>% dplyr::mutate(game_type = fct_reorder(game_type, probability)) %>%
  ggplot(aes(game_type, probability)) +
  geom_col(aes(fill=as.factor(group)), position=position_dodge(.9), color="black") +
  facet_wrap("class") +
  labs(y = "Probability of having played within past 12 months", x = "Gambling type") +
  geom_text(aes(label=round(probability, 2), group=group), size=2.7, hjust=-.35, vjust=.3,
            position=position_dodge(.9)) +
  theme_bw(base_size=14) +
  coord_flip() +
  scale_fill_manual(values=c("lightblue", "salmon")) +
  theme(legend.position = "top") +
  labs(fill = NULL, x = NULL) +
  geom_errorbar(aes(ymin = pmax(probability-(1.96*prob.se), 0), ymax = probability, group=group), width = 0.2,
                position=position_dodge(.9))

  


## Further analyses and visualizations

#PMM imputation

# NOTE: Since item-wise missing values for PGSI and ATGS are few (and for PGSI either all are missing, or none), calculating item-means is essentially the same as item-wise mean-imputation, and should be reasonable.

### Impute missing values using Predictive Mean Matching
# 1. Create temporary dataframe for predicting missing values
# 2. Impute 3 datasets using PMM
# 3. Select the first of the 3 datasets to replace NA-values in the original dataset

lca_data_imp <- lca_full %>% 
  dplyr::select(age, education, income, gender, PGSI_category, ATGS_mean, predictions, spent_weekly) %>%
  mice(m=5,maxit=50,meth='pmm',seed=500) %>% #impute 5 datasets
  complete(action="long")

#this is also added below for lca_full separately
lca_data_imp$PGSI_category2 <- fct_collapse(lca_data_imp$PGSI_category, "High level of problems" = c("Moderate level of problems", "High level of problems"))
lca_data_imp$PGSI_category2 <- factor(lca_data_imp$PGSI_category2, labels = c("No problems", "Low", "High"))

lca_full$PGSI_category2 <- fct_collapse(lca_full$PGSI_category, "High level of problems" = c("Moderate level of problems", "High level of problems"))
lca_full$PGSI_category2 <- factor(lca_full$PGSI_category2, labels = c("No problems", "Low", "High"))



# Explore class-wise summary statistics (gender coded incorrectly in the codebook!)

lca_full %>% group_by(predictions) %>% dplyr::summarize(pgsi_mean = mean(PGSI_sum, na.rm=T),
                                                        atgs_mean = mean(ATGS_mean, na.rm=T),
                                                        age_mean = mean(age, na.rm=T),
                                                        education_median= median(education, na.rm=T),
                                                        income_median = median(income, na.rm=T),
                                                        spent_weekly_median = median(spent_weekly, na.rm=T),
                                                        males = sum(gender==1, na.rm=T) / sum(gender==1 | gender==2, na.rm=T)) #female = 2, male = 1 


# Frequencies

lca_full %>% gather(key, value, weekly_lottery:gambling_paf_land_notfin) %>%
  group_by(key) %>% dplyr::summarize(yes = sum(value==1, na.rm=T),
                                     no = sum(value==2, na.rm=T))

lca_full %>% gather(key, value, lottery, scratch, horse_betting, sports_betting, casino, slots,
                    online, private_betting_pools, cruise_gambling_paf) %>%
  group_by(key) %>% dplyr::summarize(yes = sum(value==1, na.rm=T),
                                     no = sum(value==2, na.rm=T))


# Main reason to gamble vs. predicted classes

table(lca_full$main_reason, lca_full$predictions)



# Miscellaneous statistical models and visualizations
# ATGS

lca_anova <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=lca_full)
summary(lca_anova)
margins <- as_tibble(emmeans(lca_anova, ~ predictions)) # at = list(variable = c(levels)) for simple slopes

#PMM multiple imputation
m1 <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==1))
m2 <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==2))
m3 <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==3))
m4 <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==4))
m5 <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==5))
summary(pool(list(m1, m2, m3, m4, m5)))



# # ATGS with PMM-imputed (single imputation) demographics and ATGS
# 
# lca_anova_pmm <- lm(ATGS_mean_imp ~ predictions+gender_imp+log(income_imp+1)+age_imp+education_imp, data=lca_full)
# summary(lca_anova_pmm)


# Visualize

eka <- lca_full %>% dplyr::mutate(predictions = factor(predictions, levels = c(1,4,2,3),
                                                       labels = c("ME, HR",
                                                                   "HE, HR",
                                                                   "LE, LR (scratch cards)",
                                                                   "LE, LR (lottery)"))) %>%
  ggplot(aes(fct_reorder(predictions, ATGS_mean, .fun=mean), ATGS_mean)) + 
  geom_boxplot() +
  geom_jitter(width=.15, height=.25, alpha=.1) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.5) +
  theme_bw(base_size=13) +
  coord_flip() +
  labs(y = "ATGS score", x = NULL)



# Money spent

lca_anova <- lm(log(spent_weekly+1) ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=lca_full)
summary(lca_anova)
margins <- as_tibble(emmeans(lca_anova, ~ predictions))


#PMM multiple imputation
m1 <- lm(log(spent_weekly+1) ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==1))
m2 <- lm(log(spent_weekly+1) ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==2))
m3 <- lm(log(spent_weekly+1) ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==3))
m4 <- lm(log(spent_weekly+1) ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==4))
m5 <- lm(log(spent_weekly+1) ~ predictions+gender+log(income+1)+age+education+PGSI_category2, data=subset(lca_data_imp, .imp==5))
summary(pool(list(m1, m2, m3, m4, m5)))


# # Money spent with PMM-imputed demographics and ATGS
# 
# lca_anova_pmm <- lm(log(spent_weekly+1) ~ predictions+gender_imp+log(income_imp+1)+age_imp+education_imp, data=lca_full)
# summary(lca_anova_pmm)



# Visualize

toka <- lca_full %>% 
  dplyr::mutate(predictions = factor(predictions, levels = c(1,4,2,3),
                                     labels = c("ME, HR",
                                                "HE, HR",
                                                "LE, LR (scratch cards)",
                                                "LE, LR (lottery)"))) %>%
  ggplot(aes(fct_reorder(predictions, spent_weekly, na.rm=T), log(spent_weekly+1))) + 
  geom_boxplot() +
  geom_jitter(width=.15, height=.25, alpha=.03) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.75) +
  theme_bw(base_size=13) +
  coord_flip() +
  labs(y = "Log-transformed money spent", x = NULL)

ggarrange(eka, toka)


# Chi-squared test for PGSI category vs class predictions

chisq.test(table(lca_full$PGSI_category, lca_full$predictions))


# Approximations may be incorrect, too small cell sizes? Let's combine two categories, and visualize -- DONE ABOVE!

#lca_full$PGSI_category2 <- fct_collapse(lca_full$PGSI_category, "High level of problems" = c("Moderate level of problems", "High level of problems"))
#lca_full$PGSI_category2 <- factor(lca_full$PGSI_category2, labels = c("No problems", "Low", "High"))
chisq.test(table(lca_full$PGSI_category2, lca_full$predictions))

lca_full_temp <- lca_full %>% dplyr::mutate(predictions = factor(predictions, levels = c(1,4,2,3),
                                                                 labels = c("ME, HR",
                                                                            "HE, HR",
                                                                            "LE, LR\n(scratch cards)",
                                                                            "LE, LR\n(lottery)")))

mosaicplot(table(lca_full$PGSI_category2, lca_full_temp$predictions),
           main = "PGSI problem level",
           color = TRUE,
           ylab = "Predicted class",
           xlab = "Chi-squared = 349, df = 6, p < 2.2e-16",
           las=1)


###MISC multinomial regression model
lca_multinom <- vglm(predictions ~ gender+age+education+log(income+1)+PGSI_category2+spent_weekly+ATGS_mean, family=multinomial(refLevel=1), 
                     data=lca_full)
summary(lca_multinom)

m1 <- multinom(relevel(predictions, 2) ~ gender+log(income+1)+age+education+PGSI_category2+spent_weekly+ATGS_mean, data=subset(lca_data_imp, .imp==1))
m2 <- multinom(relevel(predictions, 2) ~ gender+log(income+1)+age+education+PGSI_category2+spent_weekly+ATGS_mean, data=subset(lca_data_imp, .imp==2))
m3 <- multinom(relevel(predictions, 2) ~ gender+log(income+1)+age+education+PGSI_category2+spent_weekly+ATGS_mean, data=subset(lca_data_imp, .imp==3))
m4 <- multinom(relevel(predictions, 2) ~ gender+log(income+1)+age+education+PGSI_category2+spent_weekly+ATGS_mean, data=subset(lca_data_imp, .imp==4))
m5 <- multinom(relevel(predictions, 2) ~ gender+log(income+1)+age+education+PGSI_category2+spent_weekly+ATGS_mean, data=subset(lca_data_imp, .imp==5))
summary(pool(list(m1, m2, m3, m4, m5)), conf.int = TRUE, exponentiate = TRUE)


##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
## Weighted LCA using reglca

# Data has to be in matrix form and 0/1

reglca_data <- lca_data %>% dplyr::select(lottery, scratch, horse_betting, sports_betting, casino, slots, online, online_poker_veikkaus, 
                                          private_betting_pools, cruise_gambling_paf,
                                          gambling_paf_land_notfin, weights) %>%
  dplyr::mutate(weights = weights / mean(weights, na.rm=T)) %>%
  dplyr::mutate_at(vars(-weights), function(x) ifelse(x==1, 1, 0)) %>% #variables need to be 0/1
  dplyr::filter(!is.na(weights)) 


# Weights in separate vector

weights <- reglca_data$weights


# Data needs to be a matrix

reglca_matrix <- reglca_data %>% dplyr::select(-weights) %>% as.matrix()



# Similar function as before

max_II <- -100000
min_bic <- 100000
for(i in 4:4){ #change if needed
  lc <- reglca(reglca_matrix, i, weights=weights, group=NULL, regular_type="scad",
               regular_lam=0, sd_noise_init=1, item_probs_init=NULL, class_probs_init=NULL,
               random_starts=1, random_iter=20, conv=1e-05, h=1e-04, mstep_iter=10,
               maxit=1000, verbose=TRUE, prob_min=.0001)
  if(lc$BIC < min_bic){
    min_bic <- lc$BIC
    LCA_best_model<-lc
  }
}    	


# View best model

#LCA_best_model


## Weighted LCA summaries and visualizations

fig_data <- as_tibble(LCA_best_model$item_probs) %>%
  dplyr::mutate(game_type = c("Lottery", "Scratch", "Horse betting", "Sports betting", "Casino", "Slots", "Online",
                              "Online poker Veikkaus", "Private betting pools", "Cruise gambling PAF", "Gambling PAF on land"))

fig_data %>% 
  gather(key, value, Class1, Class2, Class3, Class4) %>%
  dplyr::mutate(game_type = fct_reorder(game_type, value)) %>%
  ggplot(aes(game_type, value)) + 
  geom_col() +
  facet_wrap("key") +
  labs(y = "Probability of having played within past 12 months", x = "Game type") +
  geom_text(aes(label=round(value, 2)), size=2.3, hjust=-.1, vjust=.15) +
  theme_bw() +
  coord_flip()

predicted_class <- as.data.frame(LCA_best_model$p.aj.xi)

names(predicted_class) <- c("Class 1", "Class 2", "Class 3", "Class 4")


# A HORRIBLY UGLY wrangle (but it works):
# combine these data with the original dataframe to get models with predicted classes from weighted analyses

predicted_class <- predicted_class %>% 
  dplyr::mutate(ID = seq(1:n())) %>%
  gather(key, value, -ID) %>% 
  group_by(ID, key) %>% 
  dplyr::mutate(max_value = max(value)) %>%
  dplyr::mutate(class = ifelse(value == max_value, key, NA)) %>%
  spread(key, value) %>%
  dplyr::select(-c("Class 1", "Class 2", "Class 3", "Class 4")) %>%
  ungroup() %>%
  group_by(ID) %>%
  dplyr::mutate(predicted_class = ifelse(max_value == max(max_value), class, NA)) %>%
  na.omit() %>%
  dplyr::select(-class)



# These are identical analyses to above (with unweighted data)

reglca_full <- lca_data %>% dplyr::filter(!is.na(weights))
reglca_full <- cbind(reglca_full, predicted_class$predicted_class)
names(reglca_full)[64] <- "predictions"
reglca_full$predictions <- as.factor(reglca_full$predictions)


reglca_full %>% group_by(predictions) %>% dplyr::summarize(pgsi_mean = mean(PGSI_mean, na.rm=T)-1,
                                                           atgs_mean = mean(ATGS_mean, na.rm=T),
                                                           age_mean = mean(age, na.rm=T),
                                                           education_median= median(education, na.rm=T),
                                                           income_mean = mean(income, na.rm=T),
                                                           spent_weekly_median = median(spent_weekly, na.rm=T),
                                                           males = sum(gender==1, na.rm=T) / sum(gender==1 | gender==2, na.rm=T)) #female = 2, male = 1 



reglca_full %>% ggplot(aes(predictions, ATGS_mean)) + 
  geom_jitter(width=.15, height=.25, alpha=.1) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.5) +
  theme_bw() +
  labs(y = "ATGS score", x = "Predicted Class")

reglca_full %>% 
  ggplot(aes(predictions, log(spent_weekly+1))) + 
  geom_boxplot() +
  geom_jitter(width=.15, height=.25, alpha=.03) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.75) +
  theme_bw() +
  labs(y = "Log-transformed money spent", x = "Predicted Class")



# Chi squared for group memberships

chisq.test(table(reglca_full$PGSI_category, reglca_full$predictions))


# Approximations may be incorrect, too small cell sizes? Let's combine two cagtegories and visualize:

reglca_full$PGSI_category2 <- fct_collapse(reglca_full$PGSI_category, "High level of problems" = c("Moderate level of problems", "High level of problems"))
reglca_full$PGSI_category2 <- factor(reglca_full$PGSI_category2, labels = c("No problems", "Low", "High"))
chisq.test(table(reglca_full$PGSI_category2, reglca_full$predictions))

mosaicplot(table(reglca_full$PGSI_category2, reglca_full$predictions),
           main = "PGSI problem level",
           color = TRUE,
           ylab = "Predicted class",
           xlab = "Chi-squared = 349, df = 6, p < 2.2e-16")



####
####
####

#Joe's request, email sent 18.1.23

test <- lca_full %>% dplyr::select(slot_machine_phys, slot_machine_arcade, slot_machine_web, weekly_lottery, quick_raffle, other_daily_lottery,
                                   scratch_card, scratch_card_web, predictions)

# test <- lca_full %>% dplyr::select(weekly_lottery, quick_raffle, other_daily_lottery, scratch_card, scratch_card_web, horse_betting,
#                                    sports_betting, casino_gambling, slot_machine_phys, slot_machine_arcade, slot_machine_web, table_games_croupier,
#                                    online_poker_veikkaus, private_betting_pools, cruise_gambling_paf, online_gambling_paf, online_gambling_foreign,
#                                    gambling_paf_land_notfin, predictions)
# 
# 
# test <- lca_full %>% dplyr::select(lottery, scratch, horse_betting, sports_betting, casino, slots,
#                                    online, private_betting_pools, cruise_gambling_paf, predictions)


testikuva <- test %>% 
  #filter(predictions!=2) %>%
  gather(key, value, -predictions) %>% 
  filter(value==1) %>%
  group_by(predictions, key) %>%
  dplyr::summarize(count=n()) %>%
  dplyr::mutate(key = as.factor(key))

levels(testikuva$key) <- c("Daily lottery",
                           "Quick raffle",
                           "Scratch card, live",
                           "Scratch card, online",
                           "Slot machine, physical arcade",
                           "Slot machine, other physical",
                           "Slot machine, online",
                           "Weekly lottery")

testikuva %>% 
  dplyr::mutate(predictions = factor(predictions, levels=c(1,4,2,3),
                               labels = c("ME, HR (44.7%)",
                                          "HE, HR (10.7%)",
                                          "LE, LR (scratch cards, 12.8%)",
                                          "LE, LR (lottery, 31.6%)"))) %>%
  ggplot(aes(key, count)) + 
  geom_bar(stat="identity", color="black", fill="lightblue") + 
  coord_flip() + 
  theme_bw(base_size=13) + 
  facet_wrap("predictions") + 
  geom_text(aes(label=count), size=2.9, hjust=-0.1) + 
  ylim(c(0, 1600)) + 
  labs(y="Observations", x=NULL)


#ggarrange(fig1, testikuva)




###CURRENTLY FINAL FIGURE FOR PAPER! 6.2.23
####Figures for paper with class order manually changed, have to rechange every iteration
counts <- c(1465, 986, 0, 211, 
            670, 766, 248, 174, 
            16, 130, 0, 48,
            115, 230, 0, 173, 
            0, 44, 0, 113,
            0, 977, 0, 207,
            0, 58, 6, 177,
            9, 58, 7, 75,
             0, 268, 18, 121)

LCA_plot %>% dplyr::mutate(game_type = fct_reorder(game_type, probability),
                           class = factor(class, levels=c(2,4,3,1),
                                          labels = c("ME, HR (44.7%)",
                                                     "HE, HR (10.7%)",
                                                     "LE, LR (scratch cards, 12.8%)",
                                                     "LE, LR (lottery, 31.6%)")),
                           counts = counts) %>%
  ggplot(aes(game_type, probability, fill=counts)) +
  #ggplot(aes(game_type, probability)) +
  geom_col() +
  #geom_col(color="black", fill="lightblue") +
  facet_wrap("class") +
  labs(y = "Probability of having played within past 12 months", x = NULL) +
  geom_text(aes(label=round(probability, 2)),
            size=3, hjust=-.35, vjust=.35) +
  theme_bw(base_size=12) +
  coord_flip() +
  labs(title="LCA class structure", fill = "Number of\nobservations") +
  scale_fill_gradientn(colours=c("grey", "blue"),
                       limits=c(0,1500)) +
 # scale_fill_gradient(low = "grey", high = "blue") +
  geom_pointrange(aes(ymin = pmax(probability-(1.96*prob.se), 0), 
                    ymax = probability),
                position=position_dodge(.9), alpha=.5, size=0.30) +
  theme(panel.grid.major.y = element_blank())


#Appendix, covariate adjusted LCA: CURRENTLY FINAL FIGURE FOR PAPER 6.2.23
LCA_plot_new %>% dplyr::mutate(game_type = fct_reorder(game_type, probability),
                               class = factor(class, labels = c("ME, HR (30.3%)",
                                                                "HE, HR (10.7%)",
                                                                "LE, LR (scratch cards, 16.2%)",
                                                                "LE, LR (lottery, 42.6%)"))) %>%
  ggplot(aes(game_type, probability)) +
  geom_col(color="black", fill="lightblue") +
  facet_wrap("class") +
  labs(y = "Probability of having played within past 12 months", x = NULL) +
  geom_text(aes(label=round(probability, 2)), size=3, hjust=-.25, vjust=.35) +
  theme_bw(base_size=12) +
  coord_flip() +
  labs(title = "Covariate adjusted LCA") +
  geom_errorbar(aes(ymin = pmax(probability-(1.96*prob.se), 0), 
                    ymax = probability), width = 0.2,
                position=position_dodge(.9))





#Cronbachs alphas:
lca_full %>% dplyr::select(ATG_1:ATG_8) %>% 
  dplyr::mutate(ATG_1 = 6-ATG_1,
                ATG_4 = 6-ATG_4,
                ATG_6 = 6-ATG_6,
                ATG_7 = 6-ATG_7) %>%
  cronbach.alpha(na.rm=T)

lca_full %>% dplyr::select(PGSI_1:PGSI_9) %>%
  cronbach.alpha(na.rm=T)



# As a final robustness check, we reran the LCA again using the reglca package in R, 
# which enables including survey weights into LCA modeling. 
# The results were largely the same as in our initial non-covariate adjusted LCA 
# (see supplementary materials, table XXX) TODO, explain why survey weights are needed, 
# or don’t and remove this part entirely (we need to cut a lot of this verbose mumbo jumbo out 
# anyway for Addiction)
