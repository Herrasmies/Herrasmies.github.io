library(tidyverse)
library(hrbrthemes)

c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) # c() is a function that creates a vector of numbers
c(1:20) # This is the same as above
1:20 # And so is this
my_numbers <- 1:20 # We assign the vector c(1:20) to the object "my_numbers" 
my_numbers # Print out
my_numbers2 <- my_numbers*2 # See what happens when vectors are multiplied?
my_numbers2 # Print out
mean(1:20) # mean() is a function that calculates the simple average of a vector of numbers
mean(my_numbers) # Same as above
median(my_numbers) # median() calculates the median value of a vector of numbers
sd(my_numbers) # sd() calculates the standard deviation of a vector of numbers
range(my_numbers) # range() gives you the lowest and highest number in a vector of numbers
max(my_numbers) # Guess what this does?
min(my_numbers) # Guess what this does?
class(my_numbers)

my_numbers3 <- c(my_numbers, "Orange") # Adding a string "Orange" to a numeric vector changes its class from "numeric" to "string"!
my_numbers3
class(my_numbers3)

### Let's get rolling!

set.seed(123456) #so that random number generation is fixed

#First we create an object "my_tibble", which is essentially a fancy dataframe of two variables: my_numbers and my_numbers2
#However, we also add some random "noise" to both vectors, using the function rnorm()
my_tibble <- as_tibble(cbind(my_numbers+rnorm(20, mean=0, sd=3.5), my_numbers2+rnorm(20, mean=0, sd=3.5)))
my_tibble # Print out

# names() is a function that lists the names of variables in a data frame (or tibble), and "[n]" locates the nth element in a list
names(my_tibble)[1] <- "x" # we assign the value "x" to the first element of a list of variable names in "my_tibble"
names(my_tibble)[2] <- "y" # we assign the value "y" to the second element of a list of variable names in "my_tibble"
my_tibble # Print out

# Same as:
#my_tibble <- tibble(x = my_numbers+rnorm(20, mean=3, sd=2), y = my_numbers2+rnorm(20, mean=3, sd=2))

# ggplot() is a function that we use for plotting! More about this later.
my_plot <- ggplot(my_tibble, aes(x = x, y = y)) + geom_smooth(method="lm") + geom_point() + xlab("This is x!") + ylab("This is y!")
my_plot + labs(title="My first (regression) plot!")
my_plot + labs(title="My first (regression) plot!") + theme_classic()

#Let's make another plot. We add the variable "gender" using mutate so that the pair " 'female', 'male' " is repeated as many times as there are rows in the dataframe (or tibble)
#rep() usually takes an additional argument for how many times something is repeated, e.g. rep(1, 2) returns 1 1, but when adding to a tibble/dataframe it automatically fills the rows.

my_tibble <- my_tibble %>% dplyr::mutate(gender=rep(c("female", "male"), 10)) #note that plyr::mutate no longer recycles!
my_tibble

#More about ggplot later!
my_plot <- ggplot(my_tibble, aes(x = x, y = y, color=gender, fill=gender)) + 
  geom_smooth(method="lm", alpha=.08) + 
  #geom_line(aes(y=predict(malli))) +
  geom_point(alpha=.5, size=2.5) + 
  xlab("This is x!") + 
  ylab("This is y!")

#malli <- lm(y ~ x*gender, data=my_tibble)


my_plot + labs(title="My first (regression) plot!") + theme_classic() +
  scale_colour_manual(name=NULL, labels=c("Female", "Male"), values=c("red3", "blue3")) + 
  scale_fill_manual(name=NULL, labels=c("Female", "Male"), values=c("red3", "blue3")) +
  theme(legend.text = element_text(size=10), legend.position = c(x=.8, y=.3), legend.background = element_blank())

#Alternatively we can use a preset theme from hrbrthemes:
my_plot + labs(title="My first (regression) plot!") + theme_classic() +
  scale_colour_manual(name=NULL, labels=c("Female", "Male"), values=c("red3", "blue3")) + 
  scale_fill_manual(name=NULL, labels=c("Female", "Male"), values=c("red3", "blue3")) + theme_ipsum()

