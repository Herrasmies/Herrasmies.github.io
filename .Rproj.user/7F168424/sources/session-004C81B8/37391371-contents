---
title: "LCA/gambling analyses"
author: "(c) Jussi Palomäki, Joe Macey, Sari Castrén"
output:
  html_document:
    toc: yes
    toc_float: yes
    toc_depth: 2
    code_folding: hide
  pdf_document:
    toc: yes
    toc_depth: '2'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```

## Load libraries
```{r, message=FALSE}
library(tidyverse)
library(poLCA)
library(forcats)
library(ggmosaic)
library(emmeans)
library(scales)
library(fmsb)
library(RColorBrewer)
library(CDM)
library(naniar)
library(mice)
library(VGAM)
```

## Set contrasts
```{r}
# We'll use the "treatment", i.e. dummy-coding scheme

#options(contrasts=c("contr.sum", "contr.poly"))
options(contrasts=c("contr.treatment", "contr.poly"))
```

## Import data
```{r}
lca_data <- read.csv("C:\\Users\\jpgk\\Desktop\\LCA stuff with Joe\\lca_data.csv", sep=";")
```

## Wrangle and explore data
```{r}

# Wrangle data, calculate scales

lca_data <- lca_data %>% 
  dplyr::select(Year_ID, B1, B2, B3, B4B, B4A, B6, B5, B7, B8B, B8C, B8A, B9, B10, B13, B14, B16, B18, B18YY,
                                       PGSI_1, PGSI_2, PGSI_3, PGSI_4, PGSI_5, PGSI_6, PGSI_7, PGSI_8, PGSI_9,
                                       Gender, Age, Highest_Education_Attained, Average_Monthly_Income, wcal,
                ATG_1, ATG_2, ATG_3, ATG_4, ATG_5, ATG_6, ATG_7, ATG_8,
                B26A,
                Average_Weekly_Spend, Average_Monthly_Spend, Average_Annual_Spend) %>%
  group_by(Year_ID) %>%
  dplyr::mutate(gambled_any_dich = sum(B1, B2, B3, B4B, B4A, B6, B5, B7, B8B, B8C, B8A,
                                       B9, B10, B13, B14, B16, B18, B18YY, na.rm=T), #if 36 then has not gambled at all (2 (=no) x 18 = 36)
                PGSI_mean = mean(c(PGSI_1, PGSI_2, PGSI_3, PGSI_4, PGSI_5, PGSI_6, PGSI_7, PGSI_8, PGSI_9), na.rm=T),
                PGSI_sum = sum(c(PGSI_1-1, PGSI_2-1, PGSI_3-1, PGSI_4-1, PGSI_5-1, PGSI_6-1, PGSI_7-1, PGSI_8-1, PGSI_9-1), na.rm=T),
                ATGS_mean = mean(c(6-ATG_1, ATG_2, ATG_3, 6-ATG_4, ATG_5, 6-ATG_6, 6-ATG_7, ATG_8), na.rm=T), #HUOM! Skooraus 1 = agree, 5 = disagreee!!!
                PGSI_category = as.factor(case_when(PGSI_sum == 0 ~ "No problems",
                                          PGSI_sum > 0 & PGSI_sum < 3 ~ "Low level of problems",
                                          PGSI_sum >= 3 & PGSI_sum < 8 ~ "Moderate level of problems",
                                          PGSI_sum >= 8 ~ "High level of problems"))) %>%
  ungroup() %>%
  dplyr::rename(weekly_lottery = B1, #slow
                quick_raffle = B2, #online
                other_daily_lottery = B3, #slow
                scratch_card = B4B,
                scratch_card_web = B4A, #online
                horse_betting = B6, #skill, slow
                sports_betting = B5, #skill, slow
                casino_gambling = B7,
                slot_machine_phys = B8B,
                slot_machine_arcade = B8C,
                slot_machine_web = B8A, #online
                table_games_croupier = B9, #skill
                online_poker_veikkaus = B10, #online, skill
                private_betting_pools = B13, #slow
                cruise_gambling_paf = B14,
                online_gambling_paf = B16, #online
                online_gambling_foreign = B18, #online
                gambling_paf_land_notfin = B18YY,
                age = Age,
                gender = Gender,
                education = Highest_Education_Attained,
                income = Average_Monthly_Income,
                weights = wcal,
                main_reason = B26A,
                spent_weekly = Average_Weekly_Spend,
                spent_monthly = Average_Monthly_Spend,
                spent_yearly = Average_Annual_Spend) %>%
  dplyr::filter(gambled_any_dich != 36) #jos halutaan vain ne jotka on pelanneet joskus

lca_data$gender <- as.factor(lca_data$gender)
lca_data$main_reason <- factor(lca_data$main_reason, labels=c("Excitement, entertainment, fun", "To win money",
                                                              "To develop skills", "To compete or challenge yourself",
                                                              "To socialize", "To support worthy causes",
                                                              "To escape, relax or relieve stress",
                                                              "Because it made me feel good or skilful",
                                                              "Other reason"))


# Fix education variable (change "have not finished school" as 0, then remove "other education")

lca_data <- lca_data %>% dplyr::mutate(education = ifelse(education == 8, 0,
                                                          ifelse(education == 7, NA, education))) 


# Fix money spent as all weekly

lca_data <- lca_data %>% dplyr::mutate(spent_monthly2 = spent_monthly/4,
                                      spent_yearly2 = spent_yearly/52,
                                      spent_weekly = ifelse(is.na(spent_weekly), spent_monthly2, spent_weekly),
                                      spent_weekly = ifelse(is.na(spent_weekly), spent_yearly2, spent_weekly))




# Combine game types (1 = has tried at least once, 2 = has not)

lca_data <- lca_data %>% dplyr::mutate(slots = ifelse(slot_machine_phys+slot_machine_arcade+slot_machine_web !=6, 1, 2),
                                       lottery = ifelse(weekly_lottery+quick_raffle+other_daily_lottery !=6, 1, 2),
                                       scratch = ifelse(scratch_card+scratch_card_web != 4, 1, 2),
                                       casino = ifelse(casino_gambling+table_games_croupier != 4, 1, 2),
                                       online = ifelse(online_gambling_paf+online_gambling_foreign != 4, 1, 2))

```

### Explore missing values
```{r}

# Explore missing values
# PGSI

lca_data %>% dplyr::select(PGSI_1, PGSI_2, PGSI_3, PGSI_4, PGSI_5, PGSI_6, PGSI_7, PGSI_8, PGSI_8) %>% 
  vis_miss()


# ATGS

lca_data %>% dplyr::select(ATG_1, ATG_2, ATG_3, ATG_4, ATG_5, ATG_6, ATG_7, ATG_8) %>% 
  vis_miss()


# Demographics

lca_data %>% dplyr::select(age, education, income, gender) %>% 
  vis_miss()


# NOTE: Since item-wise missing values for PGSI and ATGS are few (and for PGSI either all are missing, or none), calculating item-means is essentially the same as item-wise mean-imputation, and should be reasonable.

```

### Impute missing values using Predictive Mean Matching
```{r, results = FALSE}
# 1. Create temporary dataframe for predicting missing values
# 2. Impute 3 datasets using PMM
# 3. Select the first of the 3 datasets to replace NA-values in the original dataset

templca <- lca_data %>% 
  dplyr::select(age, education, income, gender, PGSI_mean, ATGS_mean) %>%
  mice(m=5,maxit=50,meth='pmm',seed=500) %>% #impute 3 datasets
  complete(1) #replace missing values by first iterated dataset (could be any of them)


names(templca) <- c("age_imp", "education_imp", "income_imp", "gender_imp", "PGSI_mean_imp", "ATGS_mean_imp") #rename imputed variables

lca_data <- cbind(lca_data, templca) #include imputed variables in full dataset


# Impute original variables using the median (as was done originally)

lca_data$age[which(is.na(lca_data$age))] <- median(lca_data$age, na.rm=T)
lca_data$education[which(is.na(lca_data$education))] <- median(lca_data$education, na.rm=T)
lca_data$income[which(is.na(lca_data$income))] <- median(lca_data$income, na.rm=T)

```


### LCA modelling
```{r, results = FALSE}

# Select variables

f <- with(lca_data, cbind(lottery, scratch, horse_betting, sports_betting, casino, slots, online, online_poker_veikkaus, 
                        private_betting_pools, cruise_gambling_paf,
                        gambling_paf_land_notfin)~1)


# Run a sequence of models with N classes (now only 4) and print out the model with the lowest BIC

max_II <- -100000
min_bic <- 100000
for(i in 4:4){ #change if needed
  lc <- poLCA(f, lca_data, nclass=i, maxiter=3000, 
              tol=1e-5, na.rm=FALSE,  
              nrep=10, verbose=TRUE, calc.se=TRUE, graphs=TRUE)
  if(lc$bic < min_bic){
    min_bic <- lc$bic
    LCA_best_model<-lc
  }
}    	


# View best model

LCA_best_model
```

### Initial visualization
```{r}
# Visualize

LCA_plot <- tibble(unlist(LCA_best_model$probs))

LCA_plot <- LCA_plot %>% dplyr::mutate(game_type = as.factor(c(rep("lottery", 8), #number reflects classes x options (responses 1 or 2)
                                                               rep("scratch", 8),
                                                               rep("horse_betting", 8),
                                                               rep("sports_betting", 8),
                                                               rep("casino", 8),
                                                               rep("slots", 8),
                                                               rep("online", 8),
                                                               rep("online_poker_veikkaus", 8),
                                                               rep("private_betting_pools", 8),
                                                               rep("cruise_gambling_paf", 8),
                                                               rep("gambling_paf_land_notfin", 8))),
                                       response = rep(c(1,1,1,1,2,2,2,2), 11),
                                       class = rep(c(1,2,3,4,1,2,3,4), 11)) %>%
  dplyr::rename("probability" = `unlist(LCA_best_model$probs)`) %>%
  dplyr::filter(response == 1)


LCA_plot %>% dplyr::mutate(game_type = fct_reorder(game_type, probability)) %>%
  ggplot(aes(game_type, probability)) +
  geom_col() +
  facet_wrap("class") +
  labs(y = "Probability of having played within past 12 months", x = "Game type") +
  geom_text(aes(label=round(probability, 2)), size=2.3, hjust=-.1, vjust=.15) +
  theme_bw() +
  coord_flip()

```

## Further analyses and visualizations
```{r}

# Pull predicted classes from LCA-model and combine with original data

lca_full <- cbind(lca_data, LCA_best_model$predclass)
names(lca_full)[64] <- "predictions"
lca_full$predictions <- as.factor(lca_full$predictions)


# Explore class-wise summary statistics (gender coded incorrectly in the codebook!)

lca_full %>% group_by(predictions) %>% dplyr::summarize(pgsi_mean = mean(PGSI_mean, na.rm=T)-1,
                                                        atgs_mean = mean(ATGS_mean, na.rm=T),
                                                        age_mean = mean(age, na.rm=T),
                                                        education_median= median(education, na.rm=T),
                                                        income_mean = mean(income, na.rm=T),
                                                        spent_weekly_median = median(spent_weekly, na.rm=T),
                                                        males = sum(gender==1, na.rm=T) / sum(gender==1 | gender==2, na.rm=T)) #female = 2, male = 1 


# Frequencies

lca_full %>% gather(key, value, weekly_lottery:gambling_paf_land_notfin) %>%
  group_by(key) %>% dplyr::summarize(yes = sum(value==1, na.rm=T),
                                     no = sum(value==2, na.rm=T))


# Main reason to gamble vs. predicted classes

table(lca_full$main_reason, lca_full$predictions)



# Miscellaneous statistical models and visualizations
# ATGS

lca_anova <- lm(ATGS_mean ~ predictions+gender+log(income+1)+age+education, data=lca_full)
summary(lca_anova)
margins <- as_tibble(emmeans(lca_anova, ~ predictions)) # at = list(variable = c(levels)) for simple slopes


# ATGS with PMM-imputed demographics and ATGS

lca_anova_pmm <- lm(ATGS_mean_imp ~ predictions+gender_imp+log(income_imp+1)+age_imp+education_imp, data=lca_full)
summary(lca_anova_pmm)


# Visualize

lca_full %>% ggplot(aes(predictions, ATGS_mean)) + 
  geom_jitter(width=.15, height=.25, alpha=.1) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.5) +
  theme_bw() +
  labs(y = "ATGS score", x = "Predicted Class")



# Money spent

lca_anova <- lm(log(spent_yearly+1) ~ predictions+gender+log(income+1)+age+education, data=lca_full)
summary(lca_anova)
margins <- as_tibble(emmeans(lca_anova, ~ predictions))



# Money spent with PMM-imputed demographics and ATGS

lca_anova_pmm <- lm(log(spent_yearly+1) ~ predictions+gender_imp+log(income_imp+1)+age_imp+education_imp, data=lca_full)
summary(lca_anova_pmm)



# Visualize

lca_full %>% 
  ggplot(aes(predictions, log(spent_weekly+1))) + 
  geom_boxplot() +
  geom_jitter(width=.15, height=.25, alpha=.03) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.75) +
  theme_bw() +
  labs(y = "Log-transformed money spent", x = "Predicted Class")


# Chi-squared test for PGSI category vs class predictions

chisq.test(table(lca_full$PGSI_category, lca_full$predictions))


# Approximations may be incorrect, too small cell sizes? Let's combine two categories, and visualize

lca_full$PGSI_category2 <- fct_collapse(lca_full$PGSI_category, "High level of problems" = c("Moderate level of problems", "High level of problems"))
lca_full$PGSI_category2 <- factor(lca_full$PGSI_category2, labels = c("No problems", "Low", "High"))
chisq.test(table(lca_full$PGSI_category2, lca_full$predictions))

mosaicplot(table(lca_full$PGSI_category2, lca_full$predictions),
           main = "PGSI problem level",
           color = TRUE,
           ylab = "Predicted class",
           xlab = "Chi-squared = 349, df = 6, p < 2.2e-16")


###MISC multinomial regression model
lca_multinom <- vglm(predictions ~ gender+age+education+log(income+1)+PGSI_category2+spent_weekly+ATGS_mean, family=multinomial(refLevel=1), data=lca_full)
summary(lca_multinom)


```

## Weighted LCA using reglca
```{r, results=FALSE}
# Data has to be in matrix form and 0/1

reglca_data <- lca_data %>% dplyr::select(lottery, scratch, horse_betting, sports_betting, casino, slots, online, online_poker_veikkaus, 
                                                      private_betting_pools, cruise_gambling_paf,
                                                      gambling_paf_land_notfin, weights) %>%
                             dplyr::mutate(weights = weights / mean(weights, na.rm=T)) %>%
                             dplyr::mutate_at(vars(-weights), function(x) ifelse(x==1, 1, 0)) %>% #variables need to be 0/1
                             dplyr::filter(!is.na(weights)) 


# Weights in separate vector

weights <- reglca_data$weights


# Data needs to be a matrix

reglca_matrix <- reglca_data %>% dplyr::select(-weights) %>% as.matrix()



# Similar function as before

max_II <- -100000
min_bic <- 100000
for(i in 4:4){ #change if needed
  lc <- reglca(reglca_matrix, i, weights=weights, group=NULL, regular_type="scad",
              regular_lam=0, sd_noise_init=1, item_probs_init=NULL, class_probs_init=NULL,
              random_starts=1, random_iter=20, conv=1e-05, h=1e-04, mstep_iter=10,
              maxit=1000, verbose=TRUE, prob_min=.0001)
  if(lc$BIC < min_bic){
    min_bic <- lc$BIC
    LCA_best_model<-lc
  }
}    	


# View best model

#LCA_best_model
```

## Weighted LCA summaries and visualizations
```{r}

fig_data <- as_tibble(LCA_best_model$item_probs) %>%
  dplyr::mutate(game_type = c("Lottery", "Scratch", "Horse betting", "Sports betting", "Casino", "Slots", "Online",
                              "Online poker Veikkaus", "Private betting pools", "Cruise gambling PAF", "Gambling PAF on land"))

fig_data %>% 
  gather(key, value, Class1, Class2, Class3, Class4) %>%
  dplyr::mutate(game_type = fct_reorder(game_type, value)) %>%
  ggplot(aes(game_type, value)) + 
  geom_col() +
  facet_wrap("key") +
  labs(y = "Probability of having played within past 12 months", x = "Game type") +
  geom_text(aes(label=round(value, 2)), size=2.3, hjust=-.1, vjust=.15) +
  theme_bw() +
  coord_flip()

predicted_class <- as.data.frame(LCA_best_model$p.aj.xi)

names(predicted_class) <- c("Class 1", "Class 2", "Class 3", "Class 4")


# A HORRIBLY UGLY wrangle (but it works):
# combine these data with the original dataframe to get models with predicted classes from weighted analyses

predicted_class <- predicted_class %>% 
  dplyr::mutate(ID = seq(1:n())) %>%
  gather(key, value, -ID) %>% 
  group_by(ID, key) %>% 
  dplyr::mutate(max_value = max(value)) %>%
  dplyr::mutate(class = ifelse(value == max_value, key, NA)) %>%
  spread(key, value) %>%
  dplyr::select(-c("Class 1", "Class 2", "Class 3", "Class 4")) %>%
  ungroup() %>%
  group_by(ID) %>%
  dplyr::mutate(predicted_class = ifelse(max_value == max(max_value), class, NA)) %>%
  na.omit() %>%
  dplyr::select(-class)


# These are identical analyses to above (with unweighted data)

reglca_full <- lca_data %>% dplyr::filter(!is.na(weights))
reglca_full <- cbind(reglca_full, predicted_class$predicted_class)
names(reglca_full)[64] <- "predictions"
reglca_full$predictions <- as.factor(reglca_full$predictions)


reglca_full %>% group_by(predictions) %>% dplyr::summarize(pgsi_mean = mean(PGSI_mean, na.rm=T)-1,
                                                        atgs_mean = mean(ATGS_mean, na.rm=T),
                                                        age_mean = mean(age, na.rm=T),
                                                        education_median= median(education, na.rm=T),
                                                        income_mean = mean(income, na.rm=T),
                                                        spent_weekly_median = median(spent_weekly, na.rm=T),
                                                        males = sum(gender==1, na.rm=T) / sum(gender==1 | gender==2, na.rm=T)) #female = 2, male = 1 



reglca_full %>% ggplot(aes(predictions, ATGS_mean)) + 
  geom_jitter(width=.15, height=.25, alpha=.1) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.5) +
  theme_bw() +
  labs(y = "ATGS score", x = "Predicted Class")

reglca_full %>% 
  ggplot(aes(predictions, log(spent_weekly+1))) + 
  geom_boxplot() +
  geom_jitter(width=.15, height=.25, alpha=.03) +
  stat_summary(fun.data=mean_cl_boot, geom="errorbar", color="blue", width=.1, size=1, alpha=.5) +
  stat_summary(fun=mean, geom="point", size=4, color="blue", alpha=.75) +
  theme_bw() +
  labs(y = "Log-transformed money spent", x = "Predicted Class")



# Chi squared for group memberships

chisq.test(table(reglca_full$PGSI_category, reglca_full$predictions))


# Approximations may be incorrect, too small cell sizes? Let's combine two cagtegories and visualize:

reglca_full$PGSI_category2 <- fct_collapse(reglca_full$PGSI_category, "High level of problems" = c("Moderate level of problems", "High level of problems"))
reglca_full$PGSI_category2 <- factor(reglca_full$PGSI_category2, labels = c("No problems", "Low", "High"))
chisq.test(table(reglca_full$PGSI_category2, reglca_full$predictions))

mosaicplot(table(reglca_full$PGSI_category2, reglca_full$predictions),
           main = "PGSI problem level",
           color = TRUE,
           ylab = "Predicted class",
           xlab = "Chi-squared = 349, df = 6, p < 2.2e-16")
