min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) # Among the last row, which column has the lowest value
#closest_value <- which(abs(simulations - 0) == min(abs(simulations - 0))) #Doesn't work quite yet
#How many are winning at the end
winners <- length(which(tail(simulations, 1) > 0))
simulations$ID <- seq.int(nrow(simulations))
#Somewhat clumsy way to calculate the top and bottom 10 simulated players. Improve later?
top_ten_temp <- simulations %>%
gather(player, value, -ID) %>%
group_by(player) %>%
dplyr::mutate(last_value = tail(value, 1)) %>%
dplyr::summarize(last_value = mean(last_value)) %>%
top_n(10, last_value) %>%
dplyr::mutate(player = as.numeric(player))
top_ten <- top_ten_temp[['player']]
bottom_ten_temp <- simulations %>%
gather(player, value, -ID) %>%
group_by(player) %>%
dplyr::mutate(last_value = tail(value, 1)) %>%
dplyr::summarize(last_value = mean(last_value)) %>%
top_n(-10, last_value) %>%
dplyr::mutate(player = as.numeric(player))
bottom_ten <- bottom_ten_temp[['player']]
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
group_by(key) %>%
dplyr::mutate(profit = factor(ifelse(value > 0, 1, 0)), # Is the player winning or not
profitriskcumsum = cumsum(as.numeric(profit)-1), # cumulative number of rounds in profit
randomrisk = which(sample(c(0,1), n(), prob=c(.9999603, 1-.9999603), replace=T) == 1)[1], #among n(), produce a moment when problem gambling starts. Probability: 84 (one full week) hours of playing one has 50% chance of becoming "problem gambler" (or "high risk gambler"). 84 * 60 minutes * 5 rounds = 25200 (1- 1/25200 =  .9999603)
randomrisk = ifelse(is.na(randomrisk), n(), randomrisk), #if prob gambling doesn't start, replace NA with total length of sample
randomrisk = c(rep(0, randomrisk[1]), rep(1, n() - randomrisk[1])), #vector with 0s until problem gambling starts (1s); have to index at 1 since rep-counts argument is a vector of identical values
problem = factor(case_when(profitriskcumsum > 900 | randomrisk == 1 ~ sample(c("Not at risk", "At risk"), 1, prob=c(.5, .5)), # when winning too much, 50% chance of becoming probl. gambl. OR random risk of becoming problem gambler
TRUE ~ "Not at risk"))) %>%
ungroup()
#Upswing calculations using custom sliding-window regression (width-300 i.e. 1 hour)
simulations.long <- simulations.long %>% group_by(key) %>% dplyr::mutate(id = seq(1:n()))
upswing_detector <- function(window_width = 300, fidelity=1) { #window_width = 300 = 1 hour as a definition of upswing range
estimates_slope <- list()
counter = 0
for (x in 1:length(unique(simulations.long$key))) { #iterate through all players
for (i in seq(1, length(unique(simulations.long$id))+1-window_width, by = fidelity)) { #how many sliding windows fit within the sample, fidelity to speed calculation
temp <- subset(simulations.long, key==x & id >= i & id < i+window_width) #subset based on selected window width
temp_model <- lm(value ~ id, data=temp)
counter = counter + 1
estimates_slope[[counter]] <- coef(summary(temp_model))[2,1]
}
}
estimates_slope <- as.data.frame(unlist(estimates_slope))
estimates_slope <- estimates_slope %>%
dplyr::mutate(ID=rep(1:players, each=(length(unique(simulations.long$id))-window_width) / fidelity + 1)) # +1 before -window_width removed since otherwise doesn't work with fidelity=1 for some reason
names(estimates_slope)[1] <- "slope"
# Calculate proportion of upswings (vs. downswings) for all players, then obtain mean and sd across players, as well as maximum streak length with sd
output1 <- estimates_slope %>%
group_by(ID) %>%
dplyr::mutate(positive = ifelse(slope > 0, 1, 0),
run_length = rep(rle(positive)$lengths, rle(positive)$lengths)) %>%
dplyr::summarize(pos_prop = mean(positive),
max_run = max(run_length)) %>%
ungroup() %>%
dplyr::summarize(mean_grand_prop = mean(pos_prop),
sd_grand_prop = sd(pos_prop),
mean_run = mean(max_run),
sd_run = sd(max_run))
output2 <- estimates_slope %>%
group_by(ID) %>%
dplyr::mutate(numb = 1:n(), upswing = factor(ifelse(slope > 0, "Upswing", "Downswing"))) %>%
ggplot(aes(numb, slope, color=upswing)) +
geom_line(aes(group=1)) +
#facet_wrap("ID", scales="free") +
labs(color=NULL, x = "Hours played", y = "Slope") +
scale_color_manual(values=c("red", "blue")) +
scale_x_continuous(breaks = seq(0, (rounds-window_width)/10, by = 60),
labels=function(x)round(x/5/6 +1, 1)) + #+1 jotta saadaan tasattua normiplotin kanssa
theme_minimal(base_size=14) +
theme(legend.position="bottom")
output3 <- estimates_slope %>%
rename(key = ID) %>%
group_by(key) %>%
dplyr::mutate(key = as.character(key), ID = 1:n(), upswing = factor(ifelse(lag(slope, window_width/2) > 0, "Upswing", "Downswing")),
slope_corrected = lag(slope, window_width/2),
upswing_prop = mean(as.numeric(upswing)-1, na.rm=T)) #difficult to visualize upswings!! (this is not optimal, using lag() since the last 300 (window length) observations are missing by design)
#return(ggarrange(output2, plot3))
return(output3) #for colored visulaization of upswing
#return(output1) #for upswing proportion calculations
}
# !!!!!uncomment below to be able to use plot4!!!!!
#simulations.long <- simulations.long %>% left_join(upswing_detector())
#This was for testing whether the upswing detector works (un-comment below, and add "labs(title = output)" to plot3)
#output <- upswing_detector()
#THIS IS AN ALPHA VERSION: Illustrations of "at risk" players based on time as a winner and length of play
# plot <- simulations.long %>%
#   dplyr::mutate(problem = fct_relevel(problem, "Not at risk")) %>% #force factor level order (simulations mess this up every now and then...)
#   ggplot(aes(ID, value, group=key)) + # group=key here required for complex animation
#   geom_line(aes(colour = problem, size = problem)) +
#   geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
#   geom_hline(yintercept = 0, size=0.5, alpha=.5) +
#   xlab("Hours played") + ylab("Money (euros)") +
#   theme_minimal(base_size=14) +
#   scale_x_continuous(breaks = seq(0, rounds, by = 600), #by = 600 on by 2 hours (i.e. 600 rounds / 5 / 60)
#                      labels=function(x)round(x/5/60, 1)) +
#   theme(legend.title = element_blank(),
#         legend.position = "top") +
#   scale_color_manual(values=c("lightblue", "red")) +
#   scale_size_manual(values = c(.3, 1))
#   # guides(color="none")
# Plot only the top and bottom "players"
# Note, for animations, the coloring is sensitive to alphabetical order of the key-factor labels!
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, levels = c(max_value, min_value),
labels = c("Luckiest\nplayer", "Unluckiest\nplayer"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
geom_hline(yintercept = 0, size=0.5, alpha=.5) +
xlab("Hours played") + ylab("Money (euros)") +
theme_minimal(base_size=14) +
scale_x_continuous(breaks = seq(0, rounds, by = 600), # If <0 hour is visualized, the x-axis will not show correctly
labels=function(x)round(x/5/60, 1)) +
guides(color="none")
# Combined plot
# (code may fail if there are 3 or more identical values (shared bottom or top))
plot3 <- simulations.long %>%
#Comment back in for top and bottom
# dplyr::mutate(maxmin = case_when(key == max_value ~ "Luckiest\nplayer",
#                                  key == min_value ~ "Unluckiest\nplayer",
#                                  #key == closest_value[1] ~ "Closest to EV", #doesn't work yet
#                                  TRUE ~ "Others"),
#               maxmin = factor(maxmin, levels = c("Luckiest\nplayer", "Unluckiest\nplayer", "Others"))) %>%
#Use this for top 10 and bottom 10
dplyr::mutate(maxmin = case_when(key %in% top_ten ~ "Luckiest\n10 % of players",
key %in% bottom_ten ~ "Unluckiest\n10 % of players",
TRUE ~ "Others"),
maxmin = factor(maxmin, levels = c("Luckiest\n10 % of players", "Unluckiest\n10 % of players", "Others"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = maxmin, alpha = maxmin, size = maxmin)) +
geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
geom_hline(yintercept = 0, size=0.5, alpha=.5) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
xlab("Hours played") + ylab("Money (euros)") +
scale_color_manual(values=c("dodgerblue", "tomato", "grey")) +
theme_minimal(base_size=14) +
theme(legend.title = element_blank(),
legend.position = "top") +
scale_x_continuous(breaks = seq(0, rounds, by = 600),
labels=function(x)round(x/5/60, 1)) +
scale_alpha_manual(values = c(.7, .7, .3)) +
scale_size_manual(values = c(0.5, 0.5, .5))
#labs(title = paste("Upswing proportion (SD): ", round(output[1], 3), "(", round(output[2], 3), ")"))
#Upswing visualization (not optimal!)
plot4 <- simulations.long %>%
# dplyr::mutate(slope_corrected = ifelse(is.na(slope_corrected), 0, slope_corrected)) %>% ## I'm switching back to numeric for testing purposes, fix later
na.omit() %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = slope_corrected), size=0.9) +
geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
geom_hline(yintercept = 0, size=0.5, alpha=.5) +
xlab("Hours played") + ylab("Money (euros)") +
labs(color = "Streak strength") +
theme_minimal(base_size=14) +
theme(legend.position = "top") +
scale_alpha_manual(values = c(1, 1, .3)) +
scale_size_manual(values = c(1, 1, .5)) +
scale_color_gradient2(low="red", mid = "lightblue", high="blue") +
scale_x_continuous(breaks = seq(0, rounds, by = 600),
labels=function(x)round(x/5/60, 1))
#Add the below only if upswing_detector is used!
# annotate("text", x = 550, y = 60,
#          label = paste("Winning streaks:", round(simulations.long$upswing_prop[1], 3)*100, "%"))
# # annotate("text", x = 550, y = 60,
# #          label = paste("Winning streaks:", round(simulations.long$upswing_prop[1], 3)*100, "%",
# #                        round(simulations.long$upswing_prop[rounds+1], 3)*100, "%")) #This is an ugly fix, not for long-term use
if (topbottom == F) {
return(plot3) #winners for number of winners
}
else {
return(plot2) #or upswing_detector()
#plot for problem gambling risk plot (ALPHA VERSION!), plot2 for top and bottom, winners for number of winners at end. Visualizations work with "plot2". Note that the code may break (update to fix this is pending) if two players have idential wins or losses at the top or bottom (this is quite rare but may happen). upswing_detector() for mean length and sd of average upswings (defined as upwards trending streak of 2 hours)
}
}
#for basic calculations e.g. mean(replicate(5, casino_simulator(300, 100, F, "low"))); FOR THIS USE "winners" as the return output!
fig2 <- casino_simulator(10000, 100, F)
fig2
fig2 <- casino_simulator(10000, 100, F)
fig2
fig2 <- casino_simulator(10000, 100, F)
fig2
fig2 <- casino_simulator(10000, 100, F)
fig2
fig2 <- casino_simulator(10000, 100, F)
fig2
fig3 <- casino_simulator(10000, 100, F)
fig3
fig2
library(tidyverse)
library(gganimate)
library(transformr)
library(truncnorm)
casino_simulator <- function(rounds, players, topbottom = F, volatility = "low") {
simulations = data.frame(nrow = 0)
#For first win simulations (Nigel Turner's idea)
first_win = data.frame(nrow = 0)
#Theoretical 95 % confidence interval helpers
cumEV = cumsum(rep(0, rounds))
cumSD = sqrt(cumsum(rep(1^2, rounds))) #first convert to variance, then convert the sum back to SD // betsize = 1
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
if (volatility=="low") {
payout <- c(0, 2) - 1
#payout <- c(-1, 0, 1) #shakkisekoilu
probability <- c(50, 50)/100
#probability <- c(3, 3, 94)/100
ev <- sum(payout*probability)
}
else if (volatility=="med") {
payout <- c(0, 2) - 1
probability <- c(50, 50)/100
ev <- sum(payout*probability)
}
else {
payout <- c(0, 2) - 1
probability <- c(50, 50)/100
ev <- sum(payout*probability)
}
for (i in 1:players) {
test <- sample(payout, rounds, replace=TRUE, prob=probability)
test <- data.frame(run = test)
names(test)[1] <- i #replaces run with simple integer (for simplicity). Code needs tidying a bit.
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
#Locate first win among all bets
first_win_temp <- which(test > 0)[1]
first_win_temp <- data.frame(run = first_win_temp)
names(first_win_temp)[1] <- i
first_win <- cbind(first_win, first_win_temp)
first_win$nrow <- NULL
}
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) # Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) # Among the last row, which column has the lowest value
#closest_value <- which(abs(simulations - 0) == min(abs(simulations - 0))) #Doesn't work quite yet
#How many are winning at the end
winners <- length(which(tail(simulations, 1) > 0))
simulations$ID <- seq.int(nrow(simulations))
#Somewhat clumsy way to calculate the top and bottom 10 simulated players. Improve later?
top_ten_temp <- simulations %>%
gather(player, value, -ID) %>%
group_by(player) %>%
dplyr::mutate(last_value = tail(value, 1)) %>%
dplyr::summarize(last_value = mean(last_value)) %>%
top_n(10, last_value) %>%
dplyr::mutate(player = as.numeric(player))
top_ten <- top_ten_temp[['player']]
bottom_ten_temp <- simulations %>%
gather(player, value, -ID) %>%
group_by(player) %>%
dplyr::mutate(last_value = tail(value, 1)) %>%
dplyr::summarize(last_value = mean(last_value)) %>%
top_n(-10, last_value) %>%
dplyr::mutate(player = as.numeric(player))
bottom_ten <- bottom_ten_temp[['player']]
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
group_by(key) %>%
dplyr::mutate(profit = factor(ifelse(value > 0, 1, 0)), # Is the player winning or not
profitriskcumsum = cumsum(as.numeric(profit)-1), # cumulative number of rounds in profit
randomrisk = which(sample(c(0,1), n(), prob=c(.9999603, 1-.9999603), replace=T) == 1)[1], #among n(), produce a moment when problem gambling starts. Probability: 84 (one full week) hours of playing one has 50% chance of becoming "problem gambler" (or "high risk gambler"). 84 * 60 minutes * 5 rounds = 25200 (1- 1/25200 =  .9999603)
randomrisk = ifelse(is.na(randomrisk), n(), randomrisk), #if prob gambling doesn't start, replace NA with total length of sample
randomrisk = c(rep(0, randomrisk[1]), rep(1, n() - randomrisk[1])), #vector with 0s until problem gambling starts (1s); have to index at 1 since rep-counts argument is a vector of identical values
problem = factor(case_when(profitriskcumsum > 900 | randomrisk == 1 ~ sample(c("Not at risk", "At risk"), 1, prob=c(.5, .5)), # when winning too much, 50% chance of becoming probl. gambl. OR random risk of becoming problem gambler
TRUE ~ "Not at risk"))) %>%
ungroup()
#Upswing calculations using custom sliding-window regression (width-300 i.e. 1 hour)
simulations.long <- simulations.long %>% group_by(key) %>% dplyr::mutate(id = seq(1:n()))
upswing_detector <- function(window_width = 300, fidelity=1) { #window_width = 300 = 1 hour as a definition of upswing range
estimates_slope <- list()
counter = 0
for (x in 1:length(unique(simulations.long$key))) { #iterate through all players
for (i in seq(1, length(unique(simulations.long$id))+1-window_width, by = fidelity)) { #how many sliding windows fit within the sample, fidelity to speed calculation
temp <- subset(simulations.long, key==x & id >= i & id < i+window_width) #subset based on selected window width
temp_model <- lm(value ~ id, data=temp)
counter = counter + 1
estimates_slope[[counter]] <- coef(summary(temp_model))[2,1]
}
}
estimates_slope <- as.data.frame(unlist(estimates_slope))
estimates_slope <- estimates_slope %>%
dplyr::mutate(ID=rep(1:players, each=(length(unique(simulations.long$id))-window_width) / fidelity + 1)) # +1 before -window_width removed since otherwise doesn't work with fidelity=1 for some reason
names(estimates_slope)[1] <- "slope"
# Calculate proportion of upswings (vs. downswings) for all players, then obtain mean and sd across players, as well as maximum streak length with sd
output1 <- estimates_slope %>%
group_by(ID) %>%
dplyr::mutate(positive = ifelse(slope > 0, 1, 0),
run_length = rep(rle(positive)$lengths, rle(positive)$lengths)) %>%
dplyr::summarize(pos_prop = mean(positive),
max_run = max(run_length)) %>%
ungroup() %>%
dplyr::summarize(mean_grand_prop = mean(pos_prop),
sd_grand_prop = sd(pos_prop),
mean_run = mean(max_run),
sd_run = sd(max_run))
output2 <- estimates_slope %>%
group_by(ID) %>%
dplyr::mutate(numb = 1:n(), upswing = factor(ifelse(slope > 0, "Upswing", "Downswing"))) %>%
ggplot(aes(numb, slope, color=upswing)) +
geom_line(aes(group=1)) +
#facet_wrap("ID", scales="free") +
labs(color=NULL, x = "Hours played", y = "Slope") +
scale_color_manual(values=c("red", "blue")) +
scale_x_continuous(breaks = seq(0, (rounds-window_width)/10, by = 60),
labels=function(x)round(x/5/6 +1, 1)) + #+1 jotta saadaan tasattua normiplotin kanssa
theme_minimal(base_size=14) +
theme(legend.position="bottom")
output3 <- estimates_slope %>%
rename(key = ID) %>%
group_by(key) %>%
dplyr::mutate(key = as.character(key), ID = 1:n(), upswing = factor(ifelse(lag(slope, window_width/2) > 0, "Upswing", "Downswing")),
slope_corrected = lag(slope, window_width/2),
upswing_prop = mean(as.numeric(upswing)-1, na.rm=T)) #difficult to visualize upswings!! (this is not optimal, using lag() since the last 300 (window length) observations are missing by design)
#return(ggarrange(output2, plot3))
return(output3) #for colored visulaization of upswing
#return(output1) #for upswing proportion calculations
}
# !!!!!uncomment below to be able to use plot4!!!!!
#simulations.long <- simulations.long %>% left_join(upswing_detector())
#This was for testing whether the upswing detector works (un-comment below, and add "labs(title = output)" to plot3)
#output <- upswing_detector()
#THIS IS AN ALPHA VERSION: Illustrations of "at risk" players based on time as a winner and length of play
# plot <- simulations.long %>%
#   dplyr::mutate(problem = fct_relevel(problem, "Not at risk")) %>% #force factor level order (simulations mess this up every now and then...)
#   ggplot(aes(ID, value, group=key)) + # group=key here required for complex animation
#   geom_line(aes(colour = problem, size = problem)) +
#   geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
#   geom_hline(yintercept = 0, size=0.5, alpha=.5) +
#   xlab("Hours played") + ylab("Money (euros)") +
#   theme_minimal(base_size=14) +
#   scale_x_continuous(breaks = seq(0, rounds, by = 600), #by = 600 on by 2 hours (i.e. 600 rounds / 5 / 60)
#                      labels=function(x)round(x/5/60, 1)) +
#   theme(legend.title = element_blank(),
#         legend.position = "top") +
#   scale_color_manual(values=c("lightblue", "red")) +
#   scale_size_manual(values = c(.3, 1))
#   # guides(color="none")
# Plot only the top and bottom "players"
# Note, for animations, the coloring is sensitive to alphabetical order of the key-factor labels!
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, levels = c(max_value, min_value),
labels = c("Luckiest\nplayer", "Unluckiest\nplayer"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
geom_hline(yintercept = 0, size=0.5, alpha=.5) +
xlab("Hours played") + ylab("Money (euros)") +
theme_minimal(base_size=14) +
scale_x_continuous(breaks = seq(0, rounds, by = 600), # If <0 hour is visualized, the x-axis will not show correctly
labels=function(x)round(x/5/60, 1)) +
guides(color="none")
# Combined plot
# (code may fail if there are 3 or more identical values (shared bottom or top))
plot3 <- simulations.long %>%
#Comment back in for top and bottom
dplyr::mutate(maxmin = case_when(key == max_value ~ "Luckiest\nplayer",
key == min_value ~ "Unluckiest\nplayer",
#key == closest_value[1] ~ "Closest to EV", #doesn't work yet
TRUE ~ "Others"),
maxmin = factor(maxmin, levels = c("Luckiest\nplayer", "Unluckiest\nplayer", "Others"))) %>%
#Use this for top 10 and bottom 10
# dplyr::mutate(maxmin = case_when(key %in% top_ten ~ "Luckiest\n10 % of players",
#                                  key %in% bottom_ten ~ "Unluckiest\n10 % of players",
#                                  TRUE ~ "Others"),
#               maxmin = factor(maxmin, levels = c("Luckiest\n10 % of players", "Unluckiest\n10 % of players", "Others"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = maxmin, alpha = maxmin, size = maxmin)) +
geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
geom_hline(yintercept = 0, size=0.5, alpha=.5) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
xlab("Hours played") + ylab("Money (euros)") +
scale_color_manual(values=c("dodgerblue", "tomato", "grey")) +
theme_minimal(base_size=14) +
theme(legend.title = element_blank(),
legend.position = "top") +
scale_x_continuous(breaks = seq(0, rounds, by = 600),
labels=function(x)round(x/5/60, 1)) +
scale_alpha_manual(values = c(.7, .7, .3)) +
scale_size_manual(values = c(0.5, 0.5, .5))
#labs(title = paste("Upswing proportion (SD): ", round(output[1], 3), "(", round(output[2], 3), ")"))
#Upswing visualization (not optimal!)
plot4 <- simulations.long %>%
# dplyr::mutate(slope_corrected = ifelse(is.na(slope_corrected), 0, slope_corrected)) %>% ## I'm switching back to numeric for testing purposes, fix later
na.omit() %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = slope_corrected), size=0.9) +
geom_abline(intercept = 0, slope = ev, linetype="dashed", size=0.5, color="red", alpha=.5) +
geom_hline(yintercept = 0, size=0.5, alpha=.5) +
xlab("Hours played") + ylab("Money (euros)") +
labs(color = "Streak strength") +
theme_minimal(base_size=14) +
theme(legend.position = "top") +
scale_alpha_manual(values = c(1, 1, .3)) +
scale_size_manual(values = c(1, 1, .5)) +
scale_color_gradient2(low="red", mid = "lightblue", high="blue") +
scale_x_continuous(breaks = seq(0, rounds, by = 600),
labels=function(x)round(x/5/60, 1))
#Add the below only if upswing_detector is used!
# annotate("text", x = 550, y = 60,
#          label = paste("Winning streaks:", round(simulations.long$upswing_prop[1], 3)*100, "%"))
# # annotate("text", x = 550, y = 60,
# #          label = paste("Winning streaks:", round(simulations.long$upswing_prop[1], 3)*100, "%",
# #                        round(simulations.long$upswing_prop[rounds+1], 3)*100, "%")) #This is an ugly fix, not for long-term use
if (topbottom == F) {
return(plot3) #winners for number of winners
}
else {
return(plot2) #or upswing_detector()
#plot for problem gambling risk plot (ALPHA VERSION!), plot2 for top and bottom, winners for number of winners at end. Visualizations work with "plot2". Note that the code may break (update to fix this is pending) if two players have idential wins or losses at the top or bottom (this is quite rare but may happen). upswing_detector() for mean length and sd of average upswings (defined as upwards trending streak of 2 hours)
}
}
#for basic calculations e.g. mean(replicate(5, casino_simulator(300, 100, F, "low"))); FOR THIS USE "winners" as the return output!
casino_simulator(10000, 100, F)
fig1 <- casino_simulator(10000, 100, F)
fig1
library(ggpubr)
fig1 <- casino_simulator(10000, 100, F)
fig1
fig1 <- casino_simulator(10000, 100, F)
fig1
fig1 <- casino_simulator(10000, 100, F)
fig1 <- casino_simulator(10000, 100, F)
fig1
fig1 <- casino_simulator(10000, 100, F)
fig1
ggarrange(fig1, fig2, labels = c("A", "B"))
dev.off()
ggarrange(fig1, fig2, labels = c("A", "B"))
dev.off()
fig2
dev.off()
c(0, 2) - 1
payout <- c(0, 2) - 1
probability <- c(50, 50)/100
ev <- sum(payout*probability)
ev
offshore_filtered %>%
group_by(jakso, suku) %>%
dplyr::mutate(ongelmia_NONA = ifelse(is.na(ongelmia), 0, ongelmia)) %>%
dplyr::select(veikkaus_kuukausittain, offshore_kuukausittain, ongelmia_NONA, suku) %>%
na.omit() %>%
dplyr::summarize(veikkaus_prop = sum(veikkaus_kuukausittain)/n(),
offshore_prop = sum(offshore_kuukausittain)/n(),
ongelmia_NONA_prop = sum(ongelmia_NONA)/n(),
lower_veikkaus=prop.test(sum(veikkaus_kuukausittain),n())$conf.int[1],
upper_veikkaus=prop.test(sum(veikkaus_kuukausittain),n())$conf.int[2],
lower_offshore=prop.test(sum(offshore_kuukausittain),n())$conf.int[1],
upper_offshore=prop.test(sum(offshore_kuukausittain),n())$conf.int[2],
lower_ongelmia=prop.test(sum(ongelmia_NONA),n())$conf.int[1],
upper_ongelmia=prop.test(sum(ongelmia_NONA),n())$conf.int[2]) %>%
gather(key, value, veikkaus_prop, offshore_prop) %>%
dplyr::mutate(key = factor(key, levels = c("veikkaus_prop", "offshore_prop"),
labels = c("Veikkaus", "Offshore"))) %>%
ggplot(aes(jakso, value, color = key)) +
scale_color_manual(values = c("blue", "salmon")) +
scale_y_continuous(breaks = seq(0, 85, by = 0.10), labels = scales::percent, limits = c(0, .85)) +
geom_path(aes(group=key)) +
geom_point() +
geom_errorbar(aes(ymin = lower_veikkaus, ymax = upper_veikkaus), color = "blue", alpha = .35, width=0.25) +
geom_errorbar(aes(ymin = lower_offshore, ymax = upper_offshore), color = "salmon", alpha = .35, width=0.25) +
#geom_errorbar(aes(ymin = lower_ongelmia, ymax = upper_ongelmia), color = "red", alpha = .35, width=0.25) +
theme_bw(base_size=14) +
labs(x = NULL, color = NULL, y = "Proportion of monthly players") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = c(.75, .5)) +
facet_wrap("suku")
library(tidyverse)
# datassa 3 rivi? (kolme KH:ta), sek? muuttujat VA1-3 ja VB1-3
d <- data.frame(sbj = c('kh1', 'kh2', 'kh3'),
VA1 = 1:3,
VA2 = 2:4,
VA3 = 3:5,
VB1 = 11:13,
VB2 = 12:14,
VB3 = 13:15)
d
d %>%
gather(var, value, -sbj) %>%
separate(var, into = c("var", "class", "number"), 1:2) %>% # hajotetaan muuttujien nimet 3 sarakkeeseen v?liaikaisesti
unite(var, var, number, sep = "") %>% # ... ja yhdistet??n A/B:t? lukuunottamatta
spread(var, value)
library(tidyverse)
d %>%
gather(var, value, -sbj) %>%
separate(var, into = c("var", "class", "number"), 1:2) %>% # hajotetaan muuttujien nimet 3 sarakkeeseen v?liaikaisesti
unite(var, var, number, sep = "") %>% # ... ja yhdistet??n A/B:t? lukuunottamatta
spread(var, value)
# huom. jos muuttujat olisi hieman toisin nimetty, niin olisi yksinkertaisempaa:
d <- data.frame(sbj = c('kh1', 'kh2', 'kh3'),
V1_A = 1:3,
V2_A = 2:4,
V3_A = 3:5,
V1_B = 11:13,
V2_B = 12:14,
V3_B = 13:15)
d
d %>%
gather(var, value, -sbj) %>%
separate(var, into = c("var", "class"), sep = "_") %>% # hajotetaan muuttujien nimet kahteen
spread(var, value)
d
387000-291488
106*2.4
