#january 2022 vs january 2023
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(month==1) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("year") +
labs(x = "Kellonaika", y="S?hk?nkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_ipsum() +
theme(axis.text.y = element_blank())
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(year != 2023) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("month") +
labs(x = "Kellonaika", y="S?hk?nkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_ipsum() +
theme(axis.text.y = element_blank())
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(year != 2023) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("month") +
labs(x = "Kellonaika", y="S?hk?nkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(year != 2023) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("month") +
labs(x = "Kellonaika", y="Sähkönkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
sahko <- read_excel("C:\\Users\\jpgk\\Downloads\\electricity_transfer_report_01_01_2022_28_01_2023.xlsx")
sahko <- as_tibble(sahko)
sahko <- sahko %>%
dplyr::mutate(time = ymd_hms(Ajankohta)) %>%
select(-Ajankohta)
names(sahko) <- c("usage", "time")
sahko <- sahko %>%
mutate(year = year(time),
month = factor(month(time), labels=c("Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu",
"Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu",
"Marraskuu", "Joulukuu")),
day = day(time),
hour = hour(time)) %>%
group_by(year, month) %>%
mutate(monthly_usage = mean(usage)) %>%
ungroup() %>%
group_by(year, month, day) %>%
mutate(daily_usage = mean(usage)) %>%
ungroup()
sahko %>%
filter(year !=2023) %>%
ggplot(aes(time, daily_usage)) +
geom_line() +
#facet_wrap("year", scales = "free") +
theme_bw()
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(year != 2023) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("month") +
labs(x = "Kellonaika", y="Sähkönkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
#january 2022 vs january 2023
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(month==1) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("year") +
labs(x = "Kellonaika", y="Sähkönkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
#january 2022 vs january 2023
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(month=="Tammikuu") %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("year") +
labs(x = "Kellonaika", y="Sähkönkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(year != 2023) %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("month") +
labs(x = "Kellonaika", y="Sähkönkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
#january 2022 vs january 2023
#average daily profile, group first by hour, then by month and year to get yearly profiles of average day-profiles
sahko %>%
filter(month=="Tammikuu") %>%
group_by(hour, month, year) %>%
mutate(mean_usage_day = mean(usage, na.rm=T)) %>%
ggplot(aes(hour, mean_usage_day)) +
geom_line(size=0.8) +
facet_wrap("year") +
labs(x = "Kellonaika", y="Sähkönkulutus (Kwh)") +
geom_smooth(alpha=.1) +
geom_hline(aes(yintercept=monthly_usage), color="salmon", linetype=2, size=0.8) +
geom_point(size=0.8, alpha=.2) +
theme_bw() +
theme(axis.text.y = element_blank())
dev.off()
variance_calculator_MOVIE <- function(hands, winrate, SD, players) {
#  SE = SD/(sqrt(M))
#  interval = 1.96*SE
simulations = data.frame(nrow = 0)
confidence = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands)))
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- cbind(lower, upper, confidence)
confidence$ID <- seq.int(nrow(confidence))
confidence$nrow <- NULL
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = c(test))
names(test)[c(1)] <- paste("run",i,sep="")
simulations <- cbind(cumsum(test), simulations)
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
simulations.melted <- melt(simulations, id = "ID")
img <- image_graph(640, 400, res = 96)
datalist <- split(simulations.melted, simulations.melted$variable)
out <- lapply(datalist, function(data){
p <- ggplot() + geom_line(data = data, aes(x = ID, y = value, colour = variable)) + geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") + geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") + xlab("Hands played (x100)") + ylab("Big blinds won") + guides(color=FALSE) + geom_abline(intercept = 0, slope = winrate, linetype="dashed") + coord_cartesian(ylim = c(-1000, 1000))
print(p)
})
animation <- image_animate(img, fps = 10)
image_write(animation, "/Users/njpp2/Desktop/gapminder.gif")
return(ggplot() + geom_line(data = simulations.melted, aes(x = ID, y = value, colour = variable)) + geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") + geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") + xlab("Hands played (x100)") + ylab("Big blinds won") + guides(color=FALSE) + geom_abline(intercept = 0, slope = winrate, linetype="dashed"))
}
file.choose()
variance_calculator_MOVIE(100, 3, 75, 200)
library(reshape)
install.packages("reshape")
library(reshape)
variance_calculator_MOVIE(100, 3, 75, 200)
install.packages("magick")
library(magick)
variance_calculator_MOVIE(100, 3, 75, 200)
warnings()
variance_calculator_MOVIE(100, 3, 75, 20)
warnings()
variance_calculator_MOVIE <- function(hands, winrate, SD, players) {
#  SE = SD/(sqrt(M))
#  interval = 1.96*SE
simulations = data.frame(nrow = 0)
confidence = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands)))
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- cbind(lower, upper, confidence)
confidence$ID <- seq.int(nrow(confidence))
confidence$nrow <- NULL
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = c(test))
names(test)[c(1)] <- paste("run",i,sep="")
simulations <- cbind(cumsum(test), simulations)
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
simulations.melted <- melt(simulations, id = "ID")
# img <- image_graph(640, 400, res = 96)
# datalist <- split(simulations.melted, simulations.melted$variable)
# out <- lapply(datalist, function(data){
#   p <- ggplot() + geom_line(data = data, aes(x = ID, y = value, colour = variable)) + geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") + geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") + xlab("Hands played (x100)") + ylab("Big blinds won") + guides(color=FALSE) + geom_abline(intercept = 0, slope = winrate, linetype="dashed") + coord_cartesian(ylim = c(-1000, 1000))
#   print(p)
# })
# animation <- image_animate(img, fps = 10)
# image_write(animation, "/Users/njpp2/Desktop/gapminder.gif")
return(ggplot() + geom_line(data = simulations.melted, aes(x = ID, y = value, colour = variable)) + geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") + geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") + xlab("Hands played (x100)") + ylab("Big blinds won") + guides(color=FALSE) + geom_abline(intercept = 0, slope = winrate, linetype="dashed"))
}
variance_calculator_MOVIE(1,1,1)
variance_calculator_MOVIE(1,1,1,1)
variance_calculator_MOVIE <- function(hands, winrate, SD, players) {
#  SE = SD/(sqrt(M))
#  interval = 1.96*SE
simulations = data.frame(nrow = 0)
confidence = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands)))
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- cbind(lower, upper, confidence)
confidence$ID <- seq.int(nrow(confidence))
confidence$nrow <- NULL
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = c(test))
names(test)[c(1)] <- paste("run",i,sep="")
simulations <- cbind(cumsum(test), simulations)
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
simulations.melted <- melt(simulations, id = "ID")
# img <- image_graph(640, 400, res = 96)
# datalist <- split(simulations.melted, simulations.melted$variable)
# out <- lapply(datalist, function(data){
#   p <- ggplot() + geom_line(data = data, aes(x = ID, y = value, colour = variable)) + geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") + geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") + xlab("Hands played (x100)") + ylab("Big blinds won") + guides(color=FALSE) + geom_abline(intercept = 0, slope = winrate, linetype="dashed") + coord_cartesian(ylim = c(-1000, 1000))
#   print(p)
# })
# animation <- image_animate(img, fps = 10)
# image_write(animation, "/Users/njpp2/Desktop/gapminder.gif")
return(ggplot() +
geom_line(data = simulations.melted, aes(x = ID, y = value, colour = variable)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") +
xlab("Hands played (x100)") + ylab("Big blinds won") +
guides(color=FALSE) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed"))
}
variance_calculator_MOVIE(1,1,1,1)
seq.int(300)
variance_calculator_MOVIE <- function(hands, winrate, SD, players) {
#  SE = SD/(sqrt(M))
#  interval = 1.96*SE
simulations = data.frame(nrow = 0)
confidence = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands)))
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- cbind(lower, upper, confidence)
confidence$ID <- seq.int(nrow(confidence))
confidence$nrow <- NULL
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = c(test))
names(test)[c(1)] <- paste("run",i,sep="")
simulations <- cbind(cumsum(test), simulations)
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
simulations.melted <- melt(simulations, id = "ID")
return(ggplot() +
geom_line(data = simulations.melted, aes(x = ID, y = value, colour = variable)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") +
xlab("Hands played (x100)") + ylab("Big blinds won") +
guides(color=FALSE) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed"))
}
variance_calculator_MOVIE(1,1,1,1)
variance_calculator_MOVIE <- function(hands, winrate, SD, players) {
#  SE = SD/(sqrt(M))
#  interval = 1.96*SE
simulations = data.frame(nrow = 0)
confidence = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands)))
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- cbind(lower, upper, confidence)
confidence$ID <- seq.int(nrow(confidence))
confidence$nrow <- NULL
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = c(test))
names(test)[c(1)] <- paste("run",i,sep="")
simulations <- cbind(cumsum(test), simulations)
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
simulations.melted <- melt(simulations, id = "ID")
return(ggplot() +
geom_line(data = simulations.melted, aes(x = ID, y = value, colour = variable)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") +
xlab("Hands played (x100)") + ylab("Big blinds won") +
guides(color=FALSE) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed"))
}
variance_calculator_MOVIE
variance_calculator_MOVIE(1,1,1,1)
dev.off()
variance_calculator_MOVIE(1,1,1,1)
dev.off()
detach("package:magick", unload = TRUE)
variance_calculator_MOVIE <- function(hands, winrate, SD, players) {
#  SE = SD/(sqrt(M))
#  interval = 1.96*SE
simulations = data.frame(nrow = 0)
confidence = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands)))
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- cbind(lower, upper, confidence)
confidence$ID <- seq.int(nrow(confidence))
confidence$nrow <- NULL
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = c(test))
names(test)[c(1)] <- paste("run",i,sep="")
simulations <- cbind(cumsum(test), simulations)
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
simulations.melted <- melt(simulations, id = "ID")
# img <- image_graph(640, 400, res = 96)
# datalist <- split(simulations.melted, simulations.melted$variable)
# out <- lapply(datalist, function(data){
#   p <- ggplot() + geom_line(data = data, aes(x = ID, y = value, colour = variable)) + geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") + geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") + xlab("Hands played (x100)") + ylab("Big blinds won") + guides(color=FALSE) + geom_abline(intercept = 0, slope = winrate, linetype="dashed") + coord_cartesian(ylim = c(-1000, 1000))
#   print(p)
# })
# animation <- image_animate(img, fps = 10)
# image_write(animation, "/Users/njpp2/Desktop/gapminder.gif")
return(ggplot() +
geom_line(data = simulations.melted, aes(x = ID, y = value, colour = variable)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="grey") +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="grey") +
xlab("Hands played (x100)") + ylab("Big blinds won") +
guides(color=FALSE) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed"))
}
variance_calculator_MOVIE(1,1,1,1)
variance_calculator_MOVIE(100,3,75,20)
variance_calculator_MOVIE(100,3,75,20)
variance_calculator_MOVIE(100,3,75,20)
split(1:5)
split(1:5, 2)
split(1:5, 3)
split(1:5, 1)
split(1:5, 1:2)
split(1:6, 1:2)
variance_calculator_MOVIE(100,3,75,20)
variance_calculator_MOVIE(100,3,75,200)
variance_calculator_MOVIE(1000,3,75,200)
variance_calculator_MOVIE(200,5,75,100)
variance_calculator_MOVIE(500,5,75,100)
variance_calculator_MOVIE(500,5,75,1000)
variance_calculator_MOVIE(500,5,75,50)
variance_calculator_MOVIE(5000,5,75,50)
variance_calculator_MOVIE(5000,3,75,50)
dev.off()
library(tidyverse)
library(lme4)
cor <- -0.50
noise <- rnorm(50,0,1)
y1 <- rnorm(50, 1, 1)
y2 <- rnorm(50, 4, 1)
y3 <- rnorm(50, 7, 1)
y <- c(y1,y2,y3)
x <- c(c(y1*cor+noise), c(y2*cor+noise+5), c(y3*cor+noise+10))
group <- c(rep(1,50), rep(2,50), rep(3,50))
data <- as.data.frame(cbind(x,y,group))
data$group <- as.factor(group)
data %>% ggplot(aes(x, y, color=group)) + geom_point()
lm_model <- lm(y~x+as.numeric(group), data=data)
summary(lm_model)
lm_model2 <- lm(y~x, data=data)
lmer_model <- lmer(y~x + (x|group), data=data)
summary(lmer_model)
resid.1 <- resid(lm(y~as.numeric(group), data=data))
resid.2 <- resid(lm(x~as.numeric(group), data=data))
controlled <- lm(resid.1~resid.2)
data %>% ggplot(aes(x, y)) +
geom_point(aes(color=group), alpha=.5) +
#geom_point(aes(y=predict(lm_model)), alpha=.4) +
#geom_point(aes(y=predict(lm_model2)), alpha=.4) +
#geom_smooth(aes(color=group), method="lm") +
#geom_line(aes(y=predict(controlled))) +
geom_line(aes(y=predict(lmer_model), group=group, color="LMER Partially pooled"), size=1) +
geom_line(aes(y=predict(lm_model), group=group, color="Linear model fit"), size=1) + ##viivat eiv?t ihan samat kuin geom_smooth koska lm-mallista slope on oltava aina sama
#geom_line(aes(y=predict(lm_model2)), color="red", size=1) +
theme_bw()
data
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(foreign)
library(car)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(stargazer)
library(rnaturalearth)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(googleway)
library(ggrepel)
library(maps)
library(mapsFinland)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf()
world %>% filter(sovereignt == "Finland") %>% ggplot() + geom_sf() + theme_bw()
fincities$Vastaajat <- c(14, 1, 44, 8, 5, 8, 2, 5, 1, 4, 5, 1, 9, 1, 2, 1, 11, 1, 2, 4, 2, 1, 2, 2, 3, 4, 9, 11, 2, 3, 16, 1)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(googleway)
library(ggrepel)
library(maps)
library(mapsFinland)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
fincities <- data.frame(city = c("Espoo", "Hausjärvi", "Helsinki", "Hyvinkää", "Hämeenlinna", "Joensuu",
"Jyväskylä", "Järvenpää", "Kankaanpää", "Kouvola", "Kuopio",
"Kurikka", "Lahti", "Lappeenranta", "Mikkeli", "Nurmijärvi", "Oulu",
"Peurunka", "Pirkanmaa", "Pori", "Porvoo", "Pöytyä", "Raisio",
"Rauma", "Rovaniemi", "Seinäjoki", "Tampere", "Turku", "Tuusula", "Uusikaupunki", "Vantaa", "Ylöjärvi"),
lat = c(60.2040, 60.78333, 60.192059, 60.631811, 60.993641, 62.601090,
62.24147, 60.473944, 61.812654, 60.867883, 62.897970,
62.617132, 60.982675, 61.054993, 61.688727, 60.465499, 65.021545,
62.4344500, 61.698692, 61.485200, 60.39233, 60.719832, 60.48592,
61.130842, 66.503059, 62.787735, 61.498151, 60.454510, 60.404032, 60.800202, 60.293352, 61.55632),
lng = c(24.6540, 24.93333,24.945831, 24.857883, 24.467283, 29.763530,
25.72088, 25.090408, 22.375155, 26.704160, 27.678172,
22.398705, 25.661210, 28.189663, 27.272146, 24.807176, 25.469885,
25.8990700, 23.789560, 21.797444, 25.66507, 22.603693, 22.16895,
21.505959, 25.726967, 22.850434, 23.761025, 22.264824, 25.013060, 21.422542, 25.037769, 23.59606))
fincities$Vastaajat <- c(14, 1, 44, 8, 5, 8, 2, 5, 1, 4, 5, 1, 9, 1, 2, 1, 11, 1, 2, 4, 2, 1, 2, 2, 3, 4, 9, 11, 2, 3, 16, 1)
ggplot(taajama2019) +
geom_sf(aes(fill = kr_name))+
labs(fill = "Kaupunkimaisuus")+
theme(legend.title = element_text(size = 6),
legend.text = element_text(size=6),
legend.key.size = unit(10, "pt"),
legend.key.width = unit(4,"pt"),
legend.key.height = unit(4,"pt"),
legend.position = c(0.22,0.52)) +
geom_sf(data = fincities, aes(size=Vastaajat), color="") +
theme_bw() +
scale_fill_manual(values=c("lightblue", "lightgreen", "salmon"),
name = NULL)
world %>% filter(sovereignt == "Finland") %>%
ggplot() +
geom_sf() +
geom_sf(data = fincities, aes(size=Vastaajat), color="blue") +
# geom_text_repel(data = fincities, aes(x = lng, y = lat, label = city), size=3) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
world %>% filter(sovereignt == "Finland") %>%
ggplot() +
geom_sf() +
geom_sf(data = fincities, aes(size=Vastaajat), color="blue") +
# geom_text_repel(data = fincities, aes(x = lng, y = lat, label = city), size=3) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
world <- ne_countries(scale = "medium", returnclass = "sf")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
crosstabs %>%
group_by(sukupuoli, ko_alco) %>%
dplyr::summarize(count = n()) %>%
ungroup() %>%
dplyr::mutate(freq = count / sum(count))
