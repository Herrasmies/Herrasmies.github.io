for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
if (topbottom == F) {
return(plot)
}
else {
return(plot2)
}
}
volatility_simulator(500, 3, 25, 20, T)
library(tidyverse)
library(gganimate)
library(transformr)
library(plotly)
volatility_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
if (topbottom == F) {
return(plot)
}
else {
return(plot2)
}
}
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 20, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
if (topbottom == F) {
return(plot)
}
else {
return(plot2)
}
}
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
return(max_value)
}
}
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
return(max_value)
}
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
return(min_value)
}
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50)
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
#dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
if (topbottom == F) {
return(plot)
}
else {
return(plot2)
}
}
variance_simulator(500, 3, 25, 50)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator <- function(hands, winrate, SD, players, topbottom=F) {
simulations = data.frame(nrow = 0)
cumEV = cumsum(rep(winrate, hands))
cumSD = sqrt(cumsum(rep(SD^2, hands))) #first convert to variance, then convert the sum back to SD
lower <- qnorm(0.025, cumEV, cumSD)
upper <- qnorm(0.975, cumEV, cumSD)
confidence <- data.frame(cbind(lower, upper))
confidence$ID <- seq.int(nrow(confidence))
for (i in 1:players) {
test <- rnorm(hands, mean=winrate, sd=SD)
test <- data.frame(run = test)
#names(test)[1] <- paste("Player ",i,sep="")
names(test)[1] <- i
simulations <- cbind(simulations, cumsum(test))
simulations$nrow <- NULL
}
simulations$ID <- seq.int(nrow(simulations))
max_value <- which(tail(simulations, 1) == max(tail(simulations, 1))) #Among the last row, which column has the highest value
min_value <- which(tail(simulations, 1) == min(tail(simulations, 1))) #Among the last row, which column has the lowest value
simulations.long <- simulations %>%
gather(key, value, -ID) %>%
dplyr::mutate(profit = factor(ifelse(value > cumEV, 1, 0)))
#Plot all "players"
plot <- simulations.long %>%
ggplot(aes(ID, value, group=key)) + #group here required for complex animation
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
#Plot only the top and bottom "players"
plot2 <- simulations.long %>%
dplyr::filter(key == max_value | key == min_value) %>%
#dplyr::mutate(key = factor(key, labels = c("Best\nluck", "Worst\nluck"))) %>%
ggplot(aes(ID, value, group=key)) +
geom_line(aes(colour = key)) +
geom_line(data = confidence, aes(x = ID, y = lower), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_line(data = confidence, aes(x = ID, y = upper), linetype="dashed", color="black", size=0.5, inherit.aes=F) +
geom_abline(intercept = 0, slope = winrate, linetype="dashed", size=1) +
xlab("Hands played") + ylab("Big blinds won") +
scale_x_continuous(labels=function(x)x*100) +
theme_bw(base_size=14) +
guides(color="none")
return(min_value)
}
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
variance_simulator(500, 3, 25, 50, T)
